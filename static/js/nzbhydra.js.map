{"version":3,"sources":["nzbhydra.js","directives/updates.js","directives/search-result.js","directives/search-result-non-title-columns.js","directives/search-history.js","directives/on-finish-render.js","directives/log.js","directives/indexer-statuses.js","directives/focus-on.js","directives/download-history.js","directives/connection-test.js","directives/cfg-form-entry.js","directives/backup.js","directives/addable-nzb.js","update-service.js","update-footer-controller.js","system-controller.js","stats-service.js","stats-controller.js","search-service.js","search-results-controller.js","search-controller.js","restart-service.js","nzbhydra-control-service.js","nzb-download-service.js","modal.js","modal-service.js","generic-error-handler.js","formly-config.js","filters.js","config-service.js","config-fields-service.js","config-controller.js","categories-service.js","backup-service.js"],"names":[],"mappingszYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChzpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjr1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnnlpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"nzbhydra.js","sourcesContent":["var nzbhydraapp = angular.module('nzbhydraApp', ['angular-loading-bar', 'cgBusy', 'ngAnimate', 'ui.bootstrap', 'ipCookie', 'angular-growl', 'angular.filter', 'filters', 'ui.router', 'blockUI', 'mgcrea.ngStrap', 'angularUtils.directives.dirPagination', 'nvd3', 'formly', 'formlyBootstrap', 'frapontillo.bootstrap-switch', 'ui.select', 'ngSanitize', 'checklist-model', 'ngAria', 'ngMessages', 'ui.router.title']);\n\nangular.module('nzbhydraApp').config([\"$stateProvider\", \"$urlRouterProvider\", \"$locationProvider\", \"blockUIConfig\", \"$urlMatcherFactoryProvider\", function ($stateProvider, $urlRouterProvider, $locationProvider, blockUIConfig, $urlMatcherFactoryProvider) {\n\n    blockUIConfig.autoBlock = false;\n    $urlMatcherFactoryProvider.strictMode(false);\n\n    $stateProvider\n        .state(\"search.results\", {\n            templateUrl: \"static/html/states/search-results.html\",\n            controller: \"SearchResultsController\",\n            controllerAs: \"srController\",\n            options: {\n                inherit: false\n            },\n            params: {\n                results: [],\n                indexersearches: [],\n                total: 0,\n                resultsCount: 0,\n                minsize: undefined,\n                maxsize: undefined,\n                minage: undefined,\n                maxage: undefined\n            }, resolve: {\n                $title: function () {\n                    return \"Search results\"\n                }\n            }\n        })\n        .state(\"config\", {\n            url: \"/config\",\n            templateUrl: \"static/html/states/config.html\",\n            controller: \"ConfigController\",\n            resolve: {\n                config: ['ConfigService', function (ConfigService) {\n                    return ConfigService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function(){return \"Config\"}\n            }\n        })\n        .state(\"config.auth\", {\n            url: \"/auth\",\n            templateUrl: \"static/html/states/config.html\",\n            controller: \"ConfigController\",\n            resolve: {\n                config: ['ConfigService', function (ConfigService) {\n                    return ConfigService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"Config (Auth)\"\n                }\n            }\n        })\n        .state(\"config.searching\", {\n            url: \"/searching\",\n            templateUrl: \"static/html/states/config.html\",\n            controller: \"ConfigController\",\n            resolve: {\n                config: ['ConfigService', function (ConfigService) {\n                    return ConfigService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"Config (Searching)\"\n                }\n            }\n        })\n        .state(\"config.downloader\", {\n            url: \"/downloader\",\n            templateUrl: \"static/html/states/config.html\",\n            controller: \"ConfigController\",\n            resolve: {\n                config: ['ConfigService', function (ConfigService) {\n                    return ConfigService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"Config (Downloader)\"\n                }\n            }\n        })\n        .state(\"config.indexers\", {\n            url: \"/indexers\",\n            templateUrl: \"static/html/states/config.html\",\n            controller: \"ConfigController\",\n            resolve: {\n                config: ['ConfigService', function (ConfigService) {\n                    return ConfigService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"Config (Indexers)\"\n                }\n            }\n        })\n        .state(\"config.system\", {\n            url: \"/system\",\n            templateUrl: \"static/html/states/config.html\",\n            controller: \"ConfigController\",\n            resolve: {\n                config: ['ConfigService', function (ConfigService) {\n                    return ConfigService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"System\"\n                }\n            }\n        })\n        .state(\"config.log\", {\n            url: \"/log\",\n            templateUrl: \"static/html/states/config.html\",\n            controller: \"ConfigController\",\n            resolve: {\n                config: ['ConfigService', function (ConfigService) {\n                    return ConfigService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"System (Log)\"\n                }\n            }\n        })\n        .state(\"stats\", {\n            url: \"/stats\",\n            templateUrl: \"static/html/states/stats.html\",\n            controller: \"StatsController\",\n            resolve: {\n                stats: ['StatsService', function (StatsService) {\n                    return StatsService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"Stats\"\n                }\n            }\n        })\n        .state(\"stats.indexers\", {\n            url: \"/indexers\",\n            templateUrl: \"static/html/states/stats.html\",\n            controller: \"StatsController\",\n            resolve: {\n                stats: ['StatsService', function (StatsService) {\n                    return StatsService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"Stats (Indexers)\"\n                }\n            }\n        })\n        .state(\"stats.searches\", {\n            url: \"/searches\",\n            templateUrl: \"static/html/states/stats.html\",\n            controller: \"StatsController\",\n            resolve: {\n                stats: ['StatsService', function (StatsService) {\n                    return StatsService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"Stats (Searches)\"\n                }\n            }\n        })\n        .state(\"stats.downloads\", {\n            url: \"/downloads\",\n            templateUrl: \"static/html/states/stats.html\",\n            controller: \"StatsController\",\n            resolve: {\n                stats: ['StatsService', function (StatsService) {\n                    return StatsService.get();\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"Stats (Downloads)\"\n                }\n            }\n        })\n        .state(\"system\", {\n            url: \"/system\",\n            templateUrl: \"static/html/states/system.html\",\n            controller: \"SystemController\",\n            resolve: {\n                foobar: ['$http', function ($http) {\n                    return $http.get(\"internalapi/askforadmin\")\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"System\"\n                }\n            }\n        })\n        .state(\"system.updates\", {\n            url: \"/updates\",\n            templateUrl: \"static/html/states/system.html\",\n            controller: \"SystemController\",\n            resolve: {\n                foobar: ['$http', function ($http) {\n                    return $http.get(\"internalapi/askforadmin\")\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"System (Updates)\"\n                }\n            }\n        })\n        .state(\"system.log\", {\n            url: \"/log\",\n            templateUrl: \"static/html/states/system.html\",\n            controller: \"SystemController\",\n            resolve: {\n                foobar: ['$http', function ($http) {\n                    return $http.get(\"internalapi/askforadmin\")\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"System (Log)\"\n                }\n            }\n        })\n        .state(\"system.backup\", {\n            url: \"/backup\",\n            templateUrl: \"static/html/states/system.html\",\n            controller: \"SystemController\",\n            resolve: {\n                foobar: ['$http', function ($http) {\n                    return $http.get(\"internalapi/askforadmin\")\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"System (Backup)\"\n                }\n            }\n        })\n        .state(\"system.about\", {\n            url: \"/about\",\n            templateUrl: \"static/html/states/system.html\",\n            controller: \"SystemController\",\n            resolve: {\n                foobar: ['$http', function ($http) {\n                    return $http.get(\"internalapi/askforadmin\")\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"System (About)\"\n                }\n            }\n        })\n        .state(\"system.bugreport\", {\n            url: \"/bugreport\",\n            templateUrl: \"static/html/states/system.html\",\n            controller: \"SystemController\",\n            resolve: {\n                foobar: ['$http', function ($http) {\n                    return $http.get(\"internalapi/askforadmin\")\n                }],\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"System (Bug report)\"\n                }\n            }\n        })\n        .state(\"search\", {\n            url: \"/:search?category&query&imdbid&tvdbid&title&season&episode&minsize&maxsize&minage&maxage&offsets&rid&mode&tmdbid&indexers\",\n            templateUrl: \"static/html/states/search.html\",\n            controller: \"SearchController\",\n            resolve: {\n                safeConfig: ['ConfigService', function (ConfigService) {\n                    return ConfigService.getSafe();\n                }],\n                $title: function () {\n                    return \"Search\"\n                }\n            }\n        })\n    ;\n\n    $locationProvider.html5Mode(true);\n}]);\n\nnzbhydraapp.config([\"paginationTemplateProvider\", function (paginationTemplateProvider) {\n    paginationTemplateProvider.setPath('static/html/dirPagination.tpl.html');\n}]);\n\nnzbhydraapp.config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.latencyThreshold = 100;\n}]);\n\nnzbhydraapp.config(['growlProvider', function (growlProvider) {\n    growlProvider.globalTimeToLive(5000);\n    growlProvider.globalPosition('bottom-right');\n}]);\n\nnzbhydraapp.directive('ngEnter', function () {\n    return function (scope, element, attr) {\n        element.bind(\"keydown keypress\", function (event) {\n            if (event.which === 13) {\n                scope.$apply(function () {\n                    scope.$evalAsync(attr.ngEnter);\n                });\n\n                event.preventDefault();\n            }\n        });\n    };\n});\n\nnzbhydraapp.filter('nzblink', function () {\n    return function (resultItem) {\n        var uri = new URI(\"internalapi/getnzb\");\n        uri.addQuery(\"guid\", resultItem.guid);\n        uri.addQuery(\"title\", resultItem.title);\n        uri.addQuery(\"provider\", resultItem.provider);\n\n        return uri.toString();\n    }\n});\n\nnzbhydraapp.factory('focus', [\"$rootScope\", \"$timeout\", function ($rootScope, $timeout) {\n    return function (name) {\n        $timeout(function () {\n            $rootScope.$broadcast('focusOn', name);\n        });\n    }\n}]);\n\nnzbhydraapp.filter('unsafe', [\"$sce\", function ($sce) {\n    return $sce.trustAsHtml;\n}]);\n\nnzbhydraapp.config([\"$provide\", function ($provide) {\n    $provide.decorator(\"$exceptionHandler\", ['$delegate', '$injector', function ($delegate, $injector) {\n        return function (exception, cause) {\n            $delegate(exception, cause);\n            try {\n                console.log(exception);\n                var stack = exception.stack.split('\\n').map(function (line) {\n                    return line.trim();\n                });\n                stack = stack.join(\"\\n\");\n                $injector.get(\"$http\").put(\"internalapi/logerror\", {error: stack, cause: angular.isDefined(cause) ? cause.toString() : \"No known cause\"});\n                \n\n            } catch (e) {\n                console.error(\"Unable to log JS exception to server\", e);\n            }\n        };\n    }]);\n}]);\n\n_.mixin({\n    isNullOrEmpty: function (string) {\n        return (_.isUndefined(string) || _.isNull(string) || (_.isString(string) && string.length === 0))\n    }\n});\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydraupdates', hydraupdates);\r\n\r\nfunction hydraupdates() {\r\n    controller.$inject = [\"$scope\", \"UpdateService\", \"$sce\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/updates.html',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, UpdateService, $sce) {\r\n\r\n        $scope.loadingPromise = UpdateService.getVersions().then(function (data) {\r\n            $scope.currentVersion = data.data.currentVersion;\r\n            $scope.repVersion = data.data.repVersion;\r\n            $scope.updateAvailable = data.data.updateAvailable;\r\n            if ($scope.repVersion > $scope.currentVersion) {\r\n                UpdateService.getChangelog().then(function(data) {\r\n                    $scope.changelog = data.data.changelog;\r\n                })\r\n            }\r\n        });\r\n        \r\n        UpdateService.getVersionHistory().then(function(data) {\r\n            $scope.versionHistory = $sce.trustAsHtml(data.data.versionHistory);\r\n        });\r\n\r\n        $scope.update = function () {\r\n            UpdateService.update();\r\n        };\r\n\r\n        $scope.showChangelog = function () {\r\n            UpdateService.showChanges($scope.changelog);\r\n        };\r\n        \r\n        \r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('searchResult', searchResult);\r\n\r\nfunction searchResult() {\r\n    return {\r\n        templateUrl: 'static/html/directives/search-result.html',\r\n        require: '^titleGroup',\r\n        scope: {\r\n            titleGroup: \"=\",\r\n            showDuplicates: \"=\",\r\n            selected: \"=\",\r\n            rowIndex: \"=\"\r\n        },\r\n        controller: ['$scope', '$element', '$attrs', controller],\r\n        multiElement: true\r\n    };\r\n\r\n    function controller($scope, $element, $attrs) {\r\n        $scope.titleGroupExpanded = false;\r\n        $scope.hashGroupExpanded = {};\r\n\r\n        $scope.toggleTitleGroup = function () {\r\n            $scope.titleGroupExpanded = !$scope.titleGroupExpanded;\r\n            if (!$scope.titleGroupExpanded) {\r\n                $scope.hashGroupExpanded[$scope.titleGroup[0][0].hash] = false; //Also collapse the first title's duplicates\r\n            }\r\n        };\r\n\r\n        $scope.groupingRowDuplicatesToShow = groupingRowDuplicatesToShow;\r\n        function groupingRowDuplicatesToShow() {\r\n            if ($scope.showDuplicates &&  $scope.titleGroup[0].length > 1 && $scope.hashGroupExpanded[$scope.titleGroup[0][0].hash]) {\r\n                return $scope.titleGroup[0].slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n\r\n        //<div ng-repeat=\"hashGroup in titleGroup\" ng-if=\"titleGroup.length > 0 && titleGroupExpanded\"  class=\"search-results-row\">\r\n        $scope.otherTitleRowsToShow = otherTitleRowsToShow;\r\n        function otherTitleRowsToShow() {\r\n            if ($scope.titleGroup.length > 1 && $scope.titleGroupExpanded) {\r\n                return $scope.titleGroup.slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n        \r\n        $scope.hashGroupDuplicatesToShow = hashGroupDuplicatesToShow;\r\n        function hashGroupDuplicatesToShow(hashGroup) {\r\n            if ($scope.showDuplicates && $scope.hashGroupExpanded[hashGroup[0].hash]) {\r\n                return hashGroup.slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('otherColumns', otherColumns);\r\n\r\nfunction otherColumns($http, $templateCache, $compile, $window) {\r\n    controller.$inject = [\"$scope\", \"$http\", \"$uibModal\", \"growl\"];\r\n    return {\r\n        scope: {\r\n            result: \"=\"\r\n        },\r\n        multiElement: true,\r\n\r\n        link: function (scope, element, attrs) {\r\n            $http.get('static/html/directives/search-result-non-title-columns.html', {cache: $templateCache}).success(function (templateContent) {\r\n                element.replaceWith($compile(templateContent)(scope));\r\n            });\r\n\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, $uibModal, growl) {\r\n\r\n        $scope.showNfo = showNfo;\r\n        function showNfo(resultItem) {\r\n            if (resultItem.has_nfo == 0) {\r\n                return;\r\n            }\r\n            var uri = new URI(\"internalapi/getnfo\");\r\n            uri.addQuery(\"indexer\", resultItem.indexer);\r\n            uri.addQuery(\"guid\", resultItem.indexerguid);\r\n            return $http.get(uri.toString()).then(function (response) {\r\n                if (response.data.has_nfo) {\r\n                    $scope.openModal(\"lg\", response.data.nfo)\r\n                } else {\r\n                    if (!angular.isUndefined(resultItem.message)) {\r\n                        growl.error(resultItem.message);\r\n                    } else {\r\n                        growl.info(\"No NFO available\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.openModal = openModal;\r\n\r\n        function openModal(size, nfo) {\r\n            var modalInstance = $uibModal.open({\r\n                template: '<pre class=\"nfo\"><span ng-bind-html=\"nfo\"></span></pre>',\r\n                controller: 'NfoModalInstanceCtrl',\r\n                size: size,\r\n                resolve: {\r\n                    nfo: function () {\r\n                        return nfo;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then();\r\n        }\r\n        \r\n        $scope.downloadNzb = downloadNzb;\r\n        \r\n        function downloadNzb(resultItem) {\r\n            //href = \"{{ result.link }}\"\r\n            $window.location.href = resultItem.link;\r\n        }\r\n\r\n    }\r\n}\r\notherColumns.$inject = [\"$http\", \"$templateCache\", \"$compile\", \"$window\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('NfoModalInstanceCtrl', NfoModalInstanceCtrl);\r\n\r\nfunction NfoModalInstanceCtrl($scope, $modalInstance, nfo) {\r\n\r\n    $scope.nfo = nfo;\r\n\r\n    $scope.ok = function () {\r\n        $modalInstance.close($scope.selected.item);\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $modalInstance.dismiss();\r\n    };\r\n}\r\nNfoModalInstanceCtrl.$inject = [\"$scope\", \"$modalInstance\", \"nfo\"];","angular\n    .module('nzbhydraApp')\n    .directive('searchHistory', searchHistory);\n\n\nfunction searchHistory() {\n    return {\n        templateUrl: 'static/html/directives/search-history.html',\n        controller: ['$scope', '$http','$state', controller],\n        scope: {}\n    };\n    \n    function controller($scope, $http, $state) {\n        $scope.type = \"All\";\n        $scope.limit = 100;\n        $scope.pagination = {\n            current: 1\n        };\n\n        getSearchRequestsPage(1);\n\n        $scope.pageChanged = function (newPage) {\n            getSearchRequestsPage(newPage);\n        };\n        \n        $scope.changeType = function(type) {\n            $scope.type = type;\n            getSearchRequestsPage($scope.pagination.current);\n        };\n\n        function getSearchRequestsPage(pageNumber) {\n            $http.get(\"internalapi/getsearchrequests\", {params: {page: pageNumber, limit: $scope.limit, type: $scope.type}}).success(function (response) {\n                $scope.searchRequests = response.searchRequests;\n                $scope.totalRequests = response.totalRequests;\n            });\n        }\n        \n        $scope.openSearch = function (request) {\n            var stateParams = {};\n            if (request.identifier_key == \"imdbid\") {\n                stateParams.imdbid = request.identifier_value;\n            } else if (request.identifier_key == \"tvdbid\" || request.identifier_key == \"rid\") {\n                if (request.identifier_key == \"rid\" ) {\n                    stateParams.rid = request.identifier_value;\n                } else {\n                    stateParams.tvdbid = request.identifier_value;\n                } \n                \n                if (request.season != \"\") {\n                    stateParams.season = request.season;\n                }\n                if (request.episode != \"\") {\n                    stateParams.episode = request.episode;\n                }\n            }\n            if (request.query != \"\") {\n                stateParams.query = request.query;\n            }\n            if (request.type == \"tv\") {\n                stateParams.mode = \"tvsearch\"\n            } else if (request.type == \"tv\") {\n                stateParams.mode = \"moviesearch\"\n            } else {\n                stateParams.mode = \"search\"\n            }\n            \n            if (request.category != \"\") {\n                stateParams.category = request.category;\n            }\n\n            stateParams.category = request.category;\n            \n            $state.go(\"search\", stateParams, {inherit: false});\n        };\n        \n        $scope.formatQuery = function(request) {\n            if (request.movietitle != null) {\n                return request.movietitle; \n            }\n            if (request.tvtitle != null) {\n                return request.tvtitle;\n            }\n            return request.query;\n        }\n\n\n    }\n}","//Can be used in an ng-repeat directive to call a function when the last element was rendered\r\n//We use it to mark the end of sorting / filtering so we can stop blocking the UI\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .directive('onFinishRender', onFinishRender);\r\n\r\nfunction onFinishRender($timeout) {\r\n    function linkFunction(scope, element, attr) {\r\n        \r\n        if (scope.$last === true) {\r\n                $timeout(function () {\r\n                    scope.$evalAsync(attr.onFinishRender);\r\n                });\r\n            }\r\n    }\r\n\r\n    return {\r\n        link: linkFunction\r\n    }\r\n}\r\nonFinishRender.$inject = [\"$timeout\"];","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydralog', hydralog);\r\n\r\nfunction hydralog() {\r\n    controller.$inject = [\"$scope\", \"$http\", \"$sce\"];\r\n    return {\r\n        template: '<div cg-busy=\"{promise:logPromise,message:\\'Loading log file\\'}\"><pre ng-bind-html=\"log\" style=\"text-align: left\"></pre></div>',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, $sce) {\r\n        $scope.logPromise = $http.get(\"internalapi/getlogs\").success(function (data) {\r\n            $scope.log = $sce.trustAsHtml(data.log);\r\n        });\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('indexerStatuses', indexerStatuses);\r\n\r\nfunction indexerStatuses() {\r\n    return {\r\n        templateUrl: 'static/html/directives/indexer-statuses.html',\r\n        controller: ['$scope', '$http', controller]\r\n    };\r\n\r\n    function controller($scope, $http) {\r\n        \r\n        getIndexerStatuses();\r\n        \r\n        function getIndexerStatuses() {\r\n            $http.get(\"internalapi/getindexerstatuses\").success(function (response) {\r\n                $scope.indexerStatuses = response.indexerStatuses;\r\n            });\r\n        }\r\n        \r\n        $scope.isInPast = function (timestamp) {\r\n            return timestamp * 1000 < (new Date).getTime();\r\n        };\r\n        \r\n        $scope.enable = function(indexerName) {\r\n            $http.get(\"internalapi/enableindexer\", {params: {name: indexerName}}).then(function(response){\r\n                $scope.indexerStatuses = response.data.indexerStatuses;\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('formatDate', formatDate);\r\n\r\nfunction formatDate(dateFilter) {\r\n    return function(timestamp, hidePast) {\r\n        if (timestamp) {\r\n            if (timestamp * 1000 < (new Date).getTime() && hidePast) {\r\n                return \"\"; //\r\n            }\r\n            \r\n            var t = timestamp * 1000;\r\n            t = dateFilter(t, 'yyyy-MM-dd HH:mm:ss Z');\r\n            return t;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n}\r\nformatDate.$inject = [\"dateFilter\"];","angular\r\n    .module('nzbhydraApp').directive('focusOn', focusOn);\r\n\r\nfunction focusOn() {\r\n    return directive;\r\n    function directive(scope, elem, attr) {\r\n        scope.$on('focusOn', function (e, name) {\r\n            if (name === attr.focusOn) {\r\n                elem[0].focus();\r\n            }\r\n        });\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('downloadHistory', downloadHistory);\r\n\r\nfunction downloadHistory() {\r\n    return {\r\n        templateUrl: 'static/html/directives/download-history.html',\r\n        controller: ['$scope', '$http', controller],\r\n        scope: {}\r\n    };\r\n\r\n    function controller($scope, $http) {\r\n        $scope.type = \"All\";\r\n        $scope.limit = 100;\r\n        $scope.pagination = {\r\n            current: 1\r\n        };\r\n\r\n        $scope.changeType = function (type) {\r\n            $scope.type = type;\r\n            getDownloadsPage($scope.pagination.current);\r\n        };\r\n\r\n        getDownloadsPage(1);\r\n\r\n        $scope.pageChanged = function (newPage) {\r\n            getDownloadsPage(newPage);\r\n        };\r\n        \r\n        function getDownloadsPage(pageNumber) {\r\n            $http.get(\"internalapi/getnzbdownloads\", {params:{page: pageNumber, limit: $scope.limit, type: $scope.type}}).success(function (response) {\r\n                $scope.nzbDownloads = response.nzbDownloads;\r\n                $scope.totalDownloads = response.totalDownloads;\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n}","angular\n    .module('nzbhydraApp')\n    .directive('connectionTest', connectionTest);\n\nfunction connectionTest() {\n    controller.$inject = [\"$scope\"];\n    return {\n        templateUrl: 'static/html/directives/connection-test.html',\n        require: ['^type', '^data'],\n        scope: {\n            type: \"=\",\n            id: \"=\",\n            data: \"=\",\n            downloader: \"=\"\n        },\n        controller: controller\n    };\n\n    function controller($scope) {\n        $scope.message = \"\";\n        console.log($scope);\n\n        var testButton = \"#button-test-connection\";\n        var testMessage = \"#message-test-connection\";\n\n        function showSuccess() {\n            angular.element(testButton).removeClass(\"btn-default\");\n            angular.element(testButton).removeClass(\"btn-danger\");\n            angular.element(testButton).addClass(\"btn-success\");\n        }\n\n        function showError() {\n            angular.element(testButton).removeClass(\"btn-default\");\n            angular.element(testButton).removeClass(\"btn-success\");\n            angular.element(testButton).addClass(\"btn-danger\");\n        }\n\n        $scope.testConnection = function () {\n            angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\n            var myInjector = angular.injector([\"ng\"]);\n            var $http = myInjector.get(\"$http\");\n            var url;\n            var params;\n            if ($scope.type == \"downloader\") {\n                url = \"internalapi/test_downloader\";\n                params = {name: $scope.downloader, username: $scope.data.username, password: $scope.data.password};\n                if ($scope.downloader == \"sabnzbd\") {\n                    params.apikey = $scope.data.apikey;\n                    params.url = $scope.data.url;\n                } else {\n                    params.host = $scope.data.host;\n                    params.port = $scope.data.port;\n                    params.ssl = $scope.data.ssl;\n                }\n            } else if ($scope.data.type == \"newznab\") {\n                url = \"internalapi/test_newznab\";\n                params = {host: $scope.data.host, apikey: $scope.data.apikey};\n            } else if ($scope.data.type == \"omgwtf\") {\n                url = \"internalapi/test_omgwtf\";\n                params = {username: $scope.data.username, apikey: $scope.data.apikey};\n            }\n            $http.get(url, {params: params}).success(function (result) {\n                //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \n                if (result.result) {\n                    angular.element(testMessage).text(\"\");\n                    showSuccess();\n                } else {\n                    angular.element(testMessage).text(result.message);\n                    showError();\n                }\n\n            }).error(function () {\n                angular.element(testMessage).text(result.message);\n                showError();\n            }).finally(function () {\n                angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\n            })\n        }\n\n    }\n}\n\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('cfgFormEntry', cfgFormEntry);\r\n\r\nfunction cfgFormEntry() {\r\n    return {\r\n        templateUrl: 'static/html/directives/cfg-form-entry.html',\r\n        require: [\"^title\", \"^cfg\"],\r\n        scope: {\r\n            title: \"@\",\r\n            cfg: \"=\",\r\n            help: \"@\",\r\n            type: \"@?\",\r\n            options: \"=?\"\r\n        },\r\n        controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\r\n            $scope.type = angular.isDefined($scope.type) ? $scope.type : 'text';\r\n            $scope.options = angular.isDefined($scope.type) ? $scope.$eval($attrs.options) : [];\r\n        }]\r\n    };\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydrabackup', hydrabackup);\r\n\r\nfunction hydrabackup() {\r\n    controller.$inject = [\"$scope\", \"BackupService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/backup.html',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, BackupService) {\r\n        BackupService.getBackupsList().then(function(backups) {\r\n            $scope.backups = backups;\r\n        });\r\n        \r\n    }\r\n}\r\n\r\n","angular\n    .module('nzbhydraApp')\n    .directive('addableNzb', addableNzb);\n\nfunction addableNzb() {\n    controller.$inject = [\"$scope\", \"ConfigService\", \"NzbDownloadService\", \"growl\"];\n    return {\n        templateUrl: 'static/html/directives/addable-nzb.html',\n        require: ['^indexerguid', '^title', '^indexer', '^dbsearchid'],\n        scope: {\n            indexerguid: \"=\",\n            title: \"=\",\n            indexer: \"=\",\n            dbsearchid: \"=\"\n        },\n        controller: controller\n    };\n\n    function controller($scope, ConfigService, NzbDownloadService, growl) {\n        $scope.classname = \"\";\n        var settings = ConfigService.getSafe();\n        \n        $scope.downloader = settings.downloader.downloader;\n        if ($scope.downloader != \"none\") {\n            $scope.enabled = true;\n            $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd\" : \"nzbget\";\n        } else {\n            $scope.enabled = false;\n        }\n\n\n        $scope.add = function () {\n            $scope.classname = \"nzb-spinning\";\n            NzbDownloadService.download([{\"indexerguid\": $scope.indexerguid, \"title\": $scope.title, \"indexer\": $scope.indexer, \"dbsearchid\": $scope.dbsearchid}]).then(function (response) {\n                if (response.data.success) {\n                    $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd-success\" : \"nzbget-success\";\n                } else {\n                    $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd-error\" : \"nzbget-error\";\n                    growl.error(\"Unable to add NZB. Make sure the downloader is running and properly configured.\");\n                }\n            }, function () {\n                $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd-error\" : \"nzbget-error\";\n                growl.error(\"An unexpected error occurred while trying to contact NZB Hydra or add the NZB.\");\n            })\n        };\n\n    }\n}\n\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('UpdateService', UpdateService);\r\n\r\nfunction UpdateService($http, growl, blockUI, RestartService) {\r\n\r\n    var currentVersion;\r\n    var repVersion;\r\n    var updateAvailable;\r\n    var changelog;\r\n    var versionHistory;\r\n    \r\n    return {\r\n        update: update,\r\n        showChanges: showChanges,\r\n        getVersions: getVersions,\r\n        getChangelog: getChangelog,\r\n        getVersionHistory: getVersionHistory\r\n    };\r\n    \r\n    \r\n    \r\n    function getVersions() {\r\n        return $http.get(\"internalapi/get_versions\").then(function (data) {\r\n            currentVersion = data.data.currentVersion;\r\n            repVersion = data.data.repVersion;\r\n            updateAvailable = data.data.updateAvailable;\r\n            return data;\r\n        });\r\n    }\r\n\r\n    function getChangelog() {\r\n        return $http.get(\"internalapi/get_changelog\").then(function (data) {\r\n            changelog = data.data.changelog;\r\n            return data;\r\n        });\r\n    }\r\n    \r\n    function getVersionHistory() {\r\n        return $http.get(\"internalapi/get_version_history\").then(function (data) {\r\n            versionHistory = data.data.versionHistory;\r\n            return data;\r\n        });\r\n    }\r\n\r\n    function showChanges() {\r\n\r\n        var myInjector = angular.injector([\"ng\", \"ui.bootstrap\"]);\r\n        var $uibModal = myInjector.get(\"$uibModal\");\r\n        var params = {\r\n            size: \"lg\",\r\n            templateUrl: \"static/html/changelog.html\",\r\n            resolve: {\r\n                changelog: function () {\r\n                    return changelog;\r\n                }\r\n            },\r\n            controller: function ($scope, $sce, $uibModalInstance, changelog) {\r\n                //I fucking hate that untrusted HTML shit\r\n                changelog = $sce.trustAsHtml(changelog);\r\n                $scope.changelog = changelog;\r\n                console.log(changelog);\r\n                $scope.ok = function () {\r\n                    $uibModalInstance.dismiss();\r\n                };\r\n            }\r\n        };\r\n\r\n        var modalInstance = $uibModal.open(params);\r\n\r\n        modalInstance.result.then();\r\n    }\r\n    \r\n\r\n    function update() {\r\n        blockUI.start(\"Updating. Please stand by...\");\r\n        $http.get(\"internalapi/update\").then(function (data) {\r\n                if (data.data.success) {\r\n                    RestartService.countdownAndReload(\"Update complete.\");\r\n                } else {\r\n                    blockUI.reset();\r\n                    growl.info(\"An error occurred while updating. Please check the logs.\");\r\n                }\r\n            },\r\n            function () {\r\n                blockUI.reset();\r\n                growl.info(\"An error occurred while updating. Please check the logs.\");\r\n            });\r\n    }\r\n}\r\nUpdateService.$inject = [\"$http\", \"growl\", \"blockUI\", \"RestartService\"];\r\n\r\n","angular\n    .module('nzbhydraApp')\n    .controller('UpdateFooterController', UpdateFooterController);\n\nfunction UpdateFooterController($scope, $http, UpdateService) {\n\n    $scope.updateAvailable = false;\n    \n    $http.get(\"internalapi/mayseeadminarea\").then(function(data) {\n       if (data.data.maySeeAdminArea) {\n           UpdateService.getVersions().then(function (data) {\n               $scope.currentVersion = data.data.currentVersion;\n               $scope.repVersion = data.data.repVersion;\n               $scope.updateAvailable = data.data.updateAvailable;\n               if ($scope.repVersion > $scope.currentVersion) {\n                   UpdateService.getChangelog().then(function (data) {\n                       $scope.changelog = data.data.changelog;\n                   })\n               }\n           });\n       } \n    });\n    \n    \n    \n\n    $scope.update = function () {\n        UpdateService.update();\n    };\n\n    $scope.showChangelog = function () {\n        UpdateService.showChanges($scope.changelog);\n    }\n\n}\nUpdateFooterController.$inject = [\"$scope\", \"$http\", \"UpdateService\"];\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SystemController', SystemController);\r\n\r\nfunction SystemController($scope, $state, growl, RestartService, NzbHydraControlService) {\r\n\r\n\r\n    $scope.shutdown = function () {\r\n        NzbHydraControlService.shutdown().then(function () {\r\n                growl.info(\"Shutdown initiated. Cya!\");\r\n            },\r\n            function () {\r\n                growl.info(\"Unable to send shutdown command.\");\r\n            })\r\n    };\r\n\r\n    $scope.restart = function () {\r\n        RestartService.restart();\r\n    };\r\n    \r\n\r\n    $scope.tabs = [\r\n        {\r\n            active: false,\r\n            state: 'system'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'system.updates'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'system.log'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'system.backup'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'system.bugreport'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'system.about'\r\n        }\r\n    ];\r\n\r\n\r\n    for (var i = 0; i < $scope.tabs.length; i++) {\r\n        if ($state.is($scope.tabs[i].state)) {\r\n            $scope.tabs[i].active = true;\r\n        }\r\n    }\r\n\r\n\r\n    $scope.goToState = function (index) {\r\n        $state.go($scope.tabs[index].state);\r\n    }\r\n    \r\n    \r\n}\r\nSystemController.$inject = [\"$scope\", \"$state\", \"growl\", \"RestartService\", \"NzbHydraControlService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('StatsService', StatsService);\r\n\r\nfunction StatsService($http) {\r\n    \r\n    return {\r\n        get: getStats\r\n    };\r\n\r\n    function getStats() {\r\n            return $http.get(\"internalapi/getstats\").success(function (response) {\r\n               return response.data;\r\n            });\r\n\r\n    }\r\n\r\n}\r\nStatsService.$inject = [\"$http\"];","angular\n    .module('nzbhydraApp')\n    .controller('StatsController', StatsController);\n\nfunction StatsController($scope, stats, $state) {\n\n    stats = stats.data;\n    $scope.nzbDownloads = null;\n    $scope.avgResponseTimes = stats.avgResponseTimes;\n    $scope.avgIndexerSearchResultsShares = stats.avgIndexerSearchResultsShares;\n    $scope.avgIndexerAccessSuccesses = stats.avgIndexerAccessSuccesses;\n    $scope.indexerDownloadShares = stats.indexerDownloadShares;\n    \n\n    $scope.tabs = [\n        {\n            active: false,\n            state: 'stats'\n        },\n        {\n            active: false,\n            state: 'stats.indexers'\n        },\n        {\n            active: false,\n            state: 'stats.searches'\n        },\n        {\n            active: false,\n            state: 'stats.downloads'\n        }\n    ];\n\n\n    for (var i = 0; i < $scope.tabs.length; i++) {\n        if ($state.is($scope.tabs[i].state)) {\n            $scope.tabs[i].active = true;\n        }\n    }\n    \n\n    $scope.goToState = function (index) {\n        $state.go($scope.tabs[index].state);\n    }\n\n\n}\nStatsController.$inject = [\"$scope\", \"stats\", \"$state\"];\n","//\nangular\n    .module('nzbhydraApp')\n    .factory('SearchService', SearchService);\n\nfunction SearchService($http) {\n\n\n    var lastExecutedQuery;\n\n    var service = {search: search, loadMore: loadMore};\n    return service;\n\n    function search(category, query, tmdbid, title, tvdbid, season, episode, minsize, maxsize, minage, maxage, indexers) {\n        console.log(\"Category: \" + category);\n        var uri;\n        if (category.indexOf(\"Movies\") > -1 || (category.indexOf(\"20\") == 0)) {\n            console.log(\"Search for movies\");\n            uri = new URI(\"internalapi/moviesearch\");\n            if (!_.isUndefined(tmdbid)) {\n                console.log(\"moviesearch per tmdbid\");\n                uri.addQuery(\"tmdbid\", tmdbid);\n                uri.addQuery(\"title\", title);\n            } else {\n                console.log(\"moviesearch per query\");\n                uri.addQuery(\"query\", query);\n            }\n\n        } else if (category.indexOf(\"TV\") > -1 || (category.indexOf(\"50\") == 0)) {\n            console.log(\"Search for shows\");\n            uri = new URI(\"internalapi/tvsearch\");\n            if (!_.isUndefined(tvdbid)) {\n                uri.addQuery(\"tvdbid\", tvdbid);\n                uri.addQuery(\"title\", title);\n            } else {\n                console.log(\"tvsearch per query\");\n                uri.addQuery(\"query\", query);\n            }\n\n            if (!_.isUndefined(season)) {\n                uri.addQuery(\"season\", season);\n            }\n            if (!_.isUndefined(episode)) {\n                uri.addQuery(\"episode\", episode);\n            }\n        } else {\n            console.log(\"Search for all\");\n            uri = new URI(\"internalapi/search\");\n            uri.addQuery(\"query\", query);\n        }\n\n        if (_.isNumber(minsize)) {\n            uri.addQuery(\"minsize\", minsize);\n        }\n        if (_.isNumber(maxsize)) {\n            uri.addQuery(\"maxsize\", maxsize);\n        }\n        if (_.isNumber(minage)) {\n            uri.addQuery(\"minage\", minage);\n        }\n        if (_.isNumber(maxage)) {\n            uri.addQuery(\"maxage\", maxage);\n        }\n        if (!angular.isUndefined(indexers)) {\n            uri.addQuery(\"indexers\", decodeURIComponent(indexers));\n        }\n        \n\n        uri.addQuery(\"category\", category);\n        console.log(\"Calling \" + uri.toString());\n        lastExecutedQuery = uri;\n        return $http.get(uri.toString()).then(processData);\n\n    }\n\n    function loadMore(offset) {\n        lastExecutedQuery.removeQuery(\"offset\");\n        lastExecutedQuery.addQuery(\"offset\", offset);\n\n        console.log(\"Calling \" + lastExecutedQuery);\n        return $http.get(lastExecutedQuery.toString()).then(processData);\n    }\n\n    function processData(response) {\n        var results = response.data.results;\n        var indexersearches = response.data.indexersearches;\n        var total = response.data.total;\n        var resultsCount = results.length;\n\n\n        //Sum up response times of indexers from individual api accesses\n        //TODO: Move this to search result controller because we need to update it every time we loaded more results\n        _.each(indexersearches, function (ps) {\n            if (ps.did_search) {\n                ps.averageResponseTime = _.reduce(ps.api_accesses, function (memo, rp) {\n                    return memo + rp.response_time;\n                }, 0);\n                ps.averageResponseTime = ps.averageResponseTime / ps.api_accesses.length;\n            }\n        });\n        \n\n        return {\"results\": results, \"indexersearches\": indexersearches, \"total\": total, \"resultsCount\": resultsCount}\n    }\n}\nSearchService.$inject = [\"$http\"];","angular\n    .module('nzbhydraApp')\n    .controller('SearchResultsController', SearchResultsController);\n\n//SearchResultsController.$inject = ['blockUi'];\nfunction SearchResultsController($stateParams, $scope, $q, $timeout, blockUI, growl, NzbDownloadService, SearchService, ConfigService) {\n\n    $scope.sortPredicate = \"epoch\";\n    $scope.sortReversed = true;\n    $scope.limitTo = 100;\n    $scope.offset = 0;\n    //Handle incoming data\n    $scope.indexersearches = $stateParams.indexersearches;\n    $scope.indexerDisplayState = []; //Stores if a indexer's results should be displayed or not\n    $scope.indexerResultsInfo = {}; //Stores information about the indexer's results like how many we already retrieved\n    $scope.groupExpanded = {};\n    $scope.doShowDuplicates = false;\n    $scope.selected = [];\n    $scope.indexerStatusesExpanded = false;\n    \n    $scope.countFilteredOut = 0;\n\n    //Initially set visibility of all found indexers to true, they're needed for initial filtering / sorting\n    _.forEach($scope.indexersearches, function (ps) {\n        $scope.indexerDisplayState[ps.indexer.toLowerCase()] = true;\n    });\n\n    _.forEach($scope.indexersearches, function (ps) {\n        $scope.indexerResultsInfo[ps.indexer.toLowerCase()] = {loadedResults: ps.loaded_results};\n    });\n    \n\n    //Process results\n    $scope.results = $stateParams.results;\n    $scope.total = $stateParams.total;\n    $scope.resultsCount = $stateParams.resultsCount;\n    $scope.filteredResults = sortAndFilter($scope.results);\n    stopBlocking();\n\n\n    //Returns the content of the property (defined by the current sortPredicate) of the first group element \n    $scope.firstResultPredicate = firstResultPredicate;\n    function firstResultPredicate(item) {\n        return item[0][$scope.sortPredicate];\n    }\n\n    //Returns the unique group identifier which allows angular to keep track of the grouped search results even after filtering, making filtering by indexers a lot faster (albeit still somewhat slow...)  \n    $scope.groupId = groupId;\n    function groupId(item) {\n        return item[0][0].guid;\n    }\n\n    //Block the UI and return after timeout. This way we make sure that the blocking is done before angular starts updating the model/view. There's probably a better way to achieve that?\n    function startBlocking(message) {\n        var deferred = $q.defer();\n        blockUI.start(message);\n        $timeout(function () {\n            deferred.resolve();\n        }, 100);\n        return deferred.promise;\n    }\n\n    //Set sorting according to the predicate. If it's the same as the old one, reverse, if not sort by the given default (so that age is descending, name ascending, etc.)\n    //Sorting (and filtering) are really slow (about 2 seconds for 1000 results from 5 indexers) but I haven't found any way of making it faster, apart from the tracking \n    $scope.setSorting = setSorting;\n    function setSorting(predicate, reversedDefault) {\n        startBlocking(\"Sorting / filtering...\").then(function () {\n\n            if (predicate == $scope.sortPredicate) {\n                $scope.sortReversed = !$scope.sortReversed;\n            } else {\n                $scope.sortReversed = reversedDefault;\n            }\n            $scope.sortPredicate = predicate;\n            $scope.filteredResults = sortAndFilter($scope.results);\n            blockUI.reset();\n        });\n    }\n\n\n    \n    function sortAndFilter(results) {\n        $scope.countFilteredOut = 0;\n        var safeConfig = ConfigService.getSafe();\n        function filterByAgeAndSize(item) {\n            var filterOut = !(_.isNumber($stateParams.minsize) && item.size / 1024 / 1024 < $stateParams.minsize)\n                && !(_.isNumber($stateParams.maxsize) && item.size / 1024 / 1024 > $stateParams.maxsize)\n                && !(_.isNumber($stateParams.minage) && item.age_days < $stateParams.minage)\n                && !((_.isNumber($stateParams.maxage) && item.age_days > $stateParams.maxage)\n                    || (_.isNumber(safeConfig.searching.maxAge) && item.age_days > safeConfig.searching.maxAge)\n                        \n                );\n            if (!filterOut) {\n                $scope.countFilteredOut++;\n            }\n            return filterOut;\n        }\n        \n        \n        function getItemIndexerDisplayState(item) {\n            return $scope.indexerDisplayState[item.indexer.toLowerCase()];\n        }\n\n        function getCleanedTitle(element) {\n            return element.title.toLowerCase().replace(/[\\s\\-\\._]/ig, \"\");\n        }\n\n        function createSortedHashgroups(titleGroup) {\n\n            function createHashGroup(hashGroup) {\n                //Sorting hash group's contents should not matter for size and age and title but might for category (we might remove this, it's probably mostly unnecessary)\n                var sortedHashGroup = _.sortBy(hashGroup, function (item) {\n                    var sortPredicateValue = item[$scope.sortPredicate];\n                    return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\n                });\n                //Now sort the hash group by indexer score (inverted) so that the result with the highest indexer score is shown on top (or as the only one of a hash group if it's collapsed)\n                sortedHashGroup = _.sortBy(sortedHashGroup, function (item) {\n                    return item.indexerscore * -1;\n                });\n                return sortedHashGroup;\n            }\n\n            function getHashGroupFirstElementSortPredicate(hashGroup) {\n                var sortPredicateValue = hashGroup[0][$scope.sortPredicate];\n                return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\n            }\n\n            return _.chain(titleGroup).groupBy(\"hash\").map(createHashGroup).sortBy(getHashGroupFirstElementSortPredicate).value();\n        }\n\n        function getTitleGroupFirstElementsSortPredicate(titleGroup) {\n            var sortPredicateValue = titleGroup[0][0][$scope.sortPredicate];\n            return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\n        }\n\n        var filtered = _.chain(results)\n            //Remove elements of which the indexer is currently hidden    \n            .filter(getItemIndexerDisplayState)\n            //Make groups of results with the same title    \n            .groupBy(getCleanedTitle)\n            //For every title group make subgroups of duplicates and sort the group    \n            .map(createSortedHashgroups)\n            //And then sort the title group using its first hashgroup's first item (the group itself is already sorted and so are the hash groups)    \n            .sortBy(getTitleGroupFirstElementsSortPredicate)\n            .value();\n        if ($scope.countFilteredOut > 0) {\n            growl.info(\"Filtered \" + $scope.countFilteredOut + \" of the retrieved results\");\n        }\n        return filtered;\n\n    }\n\n    $scope.toggleTitlegroupExpand = function toggleTitlegroupExpand(titleGroup) {\n        $scope.groupExpanded[titleGroup[0][0].title] = !$scope.groupExpanded[titleGroup[0][0].title];\n        $scope.groupExpanded[titleGroup[0][0].hash] = !$scope.groupExpanded[titleGroup[0][0].hash];\n    };\n\n\n//Clear the blocking\n    $scope.stopBlocking = stopBlocking;\n    function stopBlocking() {\n        blockUI.reset();\n    }\n\n    $scope.loadMore = loadMore;\n    function loadMore() {\n        startBlocking(\"Loading more results...\").then(function () {\n            SearchService.loadMore($scope.resultsCount).then(function (data) {\n                $scope.results = $scope.results.concat(data.results);\n                $scope.filteredResults = sortAndFilter($scope.results);\n                $scope.total = data.total;\n                $scope.resultsCount += data.resultsCount;\n                stopBlocking();\n            });\n        });\n    }\n\n\n//Filters the results according to new visibility settings.\n    $scope.toggleIndexerDisplay = toggleIndexerDisplay;\n    function toggleIndexerDisplay(indexer) {\n        $scope.indexerDisplayState[indexer.toLowerCase()] = $scope.indexerDisplayState[indexer.toLowerCase()]; \n        startBlocking(\"Filtering. Sorry...\").then(function () {\n            $scope.filteredResults = sortAndFilter($scope.results);\n        }).then(function () {\n            stopBlocking();\n        });\n    }\n\n    $scope.countResults = countResults;\n    function countResults() {\n        return $scope.results.length;\n    }\n\n    $scope.downloadSelected = downloadSelected;\n    function downloadSelected() {\n\n        if (angular.isUndefined($scope.selected) || $scope.selected.length == 0) {\n            growl.info(\"You should select at least one result...\");\n        } else {\n\n            var values = _.map($scope.selected, function (value) {\n                return {\"indexerguid\": value.indexerguid, \"title\": value.title, \"indexer\": value.indexer, \"dbsearchid\": value.dbsearchid}\n            });\n\n            NzbDownloadService.download(values).then(function (response) {\n                if (response.data.success) {\n                    growl.info(\"Successfully added \" + response.data.added + \" of \" + response.data.of + \" NZBs\");\n                } else {\n                    growl.error(\"Error while adding NZBs\");\n                }\n            }, function () {\n                growl.error(\"Error while adding NZBs\");\n            });\n        }\n    }\n    \n    $scope.invertSelection = function invertSelection() {\n        $scope.selected = _.difference($scope.results, $scope.selected);\n    }\n\n}\nSearchResultsController.$inject = [\"$stateParams\", \"$scope\", \"$q\", \"$timeout\", \"blockUI\", \"growl\", \"NzbDownloadService\", \"SearchService\", \"ConfigService\"];","angular\n    .module('nzbhydraApp')\n    .controller('SearchController', SearchController);\n\nfunction SearchController($scope, $http, $stateParams, $state, SearchService, focus, ConfigService, blockUI) {\n    \n    function getNumberOrUndefined(number) {\n        if (_.isUndefined(number) || _.isNaN(number) || number == \"\") {\n            return undefined;\n        }\n        number = parseInt(number);\n        if (_.isNumber(number)) {\n            return number;\n        } else {\n            return undefined;\n        }\n    }\n\n    //Fill the form with the search values we got from the state params (so that their values are the same as in the current url)\n    $scope.mode = $stateParams.mode;\n    \n    $scope.category = (_.isUndefined($stateParams.category) || $stateParams.category == \"\") ? \"All\" : $stateParams.category;\n    $scope.tmdbid = $stateParams.tmdbid;\n    $scope.tvdbid = $stateParams.tvdbid;\n    $scope.rid = $stateParams.rid;\n    $scope.title = $stateParams.title;\n    $scope.season = $stateParams.season;\n    $scope.episode = $stateParams.episode;\n    $scope.query = $stateParams.query;\n    $scope.minsize = getNumberOrUndefined($stateParams.minsize);\n    $scope.maxsize = getNumberOrUndefined($stateParams.maxsize);\n    $scope.minage = getNumberOrUndefined($stateParams.minage);\n    $scope.maxage = getNumberOrUndefined($stateParams.maxage);\n    if (!_.isUndefined($scope.title) && _.isUndefined($scope.query)) {\n        $scope.query = $scope.title;\n    }\n    if (!angular.isUndefined($stateParams.indexers)) {\n        $scope.indexers = decodeURIComponent($stateParams.indexers).split(\"|\");\n    }\n\n    $scope.showIndexers = {};\n\n    var safeConfig = ConfigService.getSafe();\n\n\n    $scope.typeAheadWait = 300;\n    $scope.selectedItem = \"\";\n    $scope.autocompleteLoading = false;\n    $scope.isAskById = ($scope.category.indexOf(\"TV\") > -1 || $scope.category.indexOf(\"Movies\") > -1 ); //If true a check box will be shown asking the user if he wants to search by ID \n    $scope.isById = {value: true}; //If true the user wants to search by id so we enable autosearch. Was unable to achieve this using a simple boolean\n    $scope.availableIndexers = [];\n    $scope.autocompleteClass = \"autocompletePosterMovies\";\n\n    $scope.toggle = function (searchCategory) {\n        $scope.category = searchCategory;\n\n        //Show checkbox to ask if the user wants to search by ID (using autocomplete)\n        $scope.isAskById = ($scope.category.indexOf(\"TV\") > -1 || $scope.category.indexOf(\"Movies\") > -1 );\n\n        focus('focus-query-box');\n        $scope.query = \"\";\n\n        if (safeConfig.searching.categorysizes.enable_category_sizes) {\n            var min = safeConfig.searching.categorysizes[(searchCategory + \" min\").toLowerCase().replace(\" \", \"\")];\n            var max = safeConfig.searching.categorysizes[(searchCategory + \" max\").toLowerCase().replace(\" \", \"\")];\n            if (_.isNumber(min)) {\n                $scope.minsize = min;\n            } else {\n                $scope.minsize = \"\";\n            }\n            if (_.isNumber(max)) {\n                $scope.maxsize = max;\n            } else {\n                $scope.maxsize = \"\";\n            }\n        }\n    };\n\n\n    // Any function returning a promise object can be used to load values asynchronously\n    $scope.getAutocomplete = function (val) {\n        $scope.autocompleteLoading = true;\n        //Expected model returned from API:\n        //label: What to show in the results\n        //title: Will be used for file search\n        //value: Will be used as extraInfo (ttid oder tvdb id)\n        //poster: url of poster to show\n\n        //Don't use autocomplete if checkbox is disabled\n        if (!$scope.isById.value) {\n            return {};\n        }\n\n        if ($scope.category.indexOf(\"Movies\") > -1) {\n            return $http.get('internalapi/autocomplete?type=movie', {\n                params: {\n                    input: val\n                }\n            }).then(function (response) {\n                $scope.autocompleteLoading = false;\n                return response.data.results;\n            });\n        } else if ($scope.category.indexOf(\"TV\") > -1) {\n\n            return $http.get('internalapi/autocomplete?type=tv', {\n                params: {\n                    input: val\n                }\n            }).then(function (response) {\n                $scope.autocompleteLoading = false;\n                return response.data.results;\n            });\n        } else {\n            return {};\n        }\n    };\n    \n\n    $scope.startSearch = function () {\n        blockUI.start(\"Searching...\");\n        var indexers = angular.isUndefined($scope.indexers) ? undefined : $scope.indexers.join(\"|\");\n        SearchService.search($scope.category, $scope.query, $stateParams.tmdbid, $scope.title, $scope.tvdbid, $scope.season, $scope.episode, $scope.minsize, $scope.maxsize, $scope.minage, $scope.maxage, indexers).then(function (searchResult) {\n            $state.go(\"search.results\", {\n                results: searchResult.results,\n                indexersearches: searchResult.indexersearches,\n                total: searchResult.total,\n                resultsCount: searchResult.resultsCount,\n                minsize: $scope.minsize,\n                maxsize: $scope.maxsize,\n                minage: $scope.minage,\n                maxage: $scope.maxage\n            }, {\n                inherit: true\n            });\n            $scope.tmdbid = undefined;\n            $scope.tvdbid = undefined;\n        });\n    };\n    \n    function getSelectedIndexers() {\n        var activatedIndexers = _.filter($scope.availableIndexers).filter(function (indexer) {\n            return indexer.activated ;\n        });\n            return _.pluck(activatedIndexers, \"name\").join(\"|\");\n    }\n\n\n    $scope.goToSearchUrl = function () {\n        var stateParams = {};\n        if ($scope.category.indexOf(\"Movies\") > -1) {\n            stateParams.mode = \"moviesearch\";\n            stateParams.title = $scope.title;\n            stateParams.mode = \"moviesearch\";\n        } else if ($scope.category.indexOf(\"TV\") > -1) {\n            stateParams.mode = \"tvsearch\";\n            stateParams.title = $scope.title;\n        } else if ($scope.category == \"Ebook\") {\n            stateParams.mode = \"ebook\";\n        } else {\n            stateParams.mode = \"search\";\n        }\n        \n        stateParams.tmdbid = $scope.tmdbid;\n        stateParams.tvdbid = $scope.tvdbid;\n        stateParams.title = $scope.title;\n        stateParams.season = $scope.season;\n        stateParams.episode = $scope.episode;\n        stateParams.query = $scope.query;\n        stateParams.minsize = $scope.minsize;\n        stateParams.maxsize = $scope.maxsize;\n        stateParams.minage = $scope.minage;\n        stateParams.maxage = $scope.maxage;\n        stateParams.category = $scope.category;\n        stateParams.indexers = encodeURIComponent(getSelectedIndexers());\n        \n        $state.go(\"search\", stateParams, {inherit: false, notify: true, reload: true});\n    };\n\n\n    $scope.selectAutocompleteItem = function ($item) {\n        $scope.selectedItem = $item;\n        $scope.title = $item.title;\n        if ($scope.category.indexOf(\"Movies\") > -1) {\n            $scope.tmdbid = $item.value;\n        } else if ($scope.category.indexOf(\"TV\") > -1) {\n            $scope.tvdbid = $item.value;\n        }\n        $scope.query = \"\";\n        $scope.goToSearchUrl();\n    };\n    \n    $scope.startQuerySearch = function() {\n        //Reset values because they might've been set from the last search\n        $scope.title = undefined;\n        $scope.tmdbid = undefined;\n        $scope.tvdbid = undefined;\n        $scope.goToSearchUrl();\n    };\n\n\n    $scope.autocompleteActive = function () {\n        return ($scope.category.indexOf(\"TV\") > -1) || ($scope.category.indexOf(\"Movies\") > -1)\n    };\n\n    $scope.seriesSelected = function () {\n        return ($scope.category.indexOf(\"TV\") > -1);\n    };\n    \n    $scope.toggleIndexer = function(indexer) {\n        $scope.indexers[indexer] = !$scope.indexers[indexer]\n    };\n    \n\n    function isIndexerPreselected(indexer) {\n        if (angular.isUndefined($scope.indexers)) {\n            return indexer.preselect;\n        } else {\n            return _.contains($scope.indexers, indexer.name);\n        }\n        \n    }\n\n    \n    $scope.availableIndexers = _.chain(safeConfig.indexers).filter(function (indexer) {\n        return indexer.enabled && indexer.showOnSearch;\n    }).sortBy(\"name\")\n        .map(function (indexer) {\n        return {name: indexer.name, activated: isIndexerPreselected(indexer)};\n    }).value();\n        \n    \n\n    if ($scope.mode) {\n        console.log(\"Starting search in newly loaded search controller\");\n        $scope.startSearch();\n    }\n    \n}\nSearchController.$inject = [\"$scope\", \"$http\", \"$stateParams\", \"$state\", \"SearchService\", \"focus\", \"ConfigService\", \"blockUI\"];\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('RestartService', RestartService);\r\n\r\nfunction RestartService(blockUI, $timeout, $window, NzbHydraControlService) {\r\n\r\n    return {\r\n        restart: restart,\r\n        countdownAndReload: countdownAndReload\r\n    };\r\n\r\n    function countdownAndReload(message) {\r\n        message = angular.isUndefined ? \"\" : \" \";\r\n\r\n        blockUI.start(message + \"Restarting. Will reload page in 5 seconds...\");\r\n        $timeout(function () {\r\n            blockUI.start(message + \"Restarting. Will reload page in 4 seconds...\");\r\n            $timeout(function () {\r\n                blockUI.start(message + \"Restarting. Will reload page in 3 seconds...\");\r\n                $timeout(function () {\r\n                    blockUI.start(message + \"Restarting. Will reload page in 2 seconds...\");\r\n                    $timeout(function () {\r\n                        blockUI.start(message + \"Restarting. Will reload page in 1 second...\");\r\n                        $timeout(function () {\r\n                            blockUI.start(\"Reloading page...\");\r\n                            $window.location.reload();\r\n                        }, 1000);\r\n                    }, 1000);\r\n                }, 1000);\r\n            }, 1000);\r\n        }, 1000);\r\n    }\r\n\r\n    function restart(message) {\r\n        NzbHydraControlService.restart().then(countdownAndReload(message),\r\n            function () {\r\n                growl.info(\"Unable to send restart command.\");\r\n            }\r\n        )\r\n    }\r\n}\r\nRestartService.$inject = [\"blockUI\", \"$timeout\", \"$window\", \"NzbHydraControlService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbHydraControlService', NzbHydraControlService);\r\n\r\nfunction NzbHydraControlService($http) {\r\n\r\n    return {\r\n        restart: restart,\r\n        shutdown: shutdown\r\n    };\r\n\r\n    function restart() {\r\n        return $http.get(\"internalapi/restart\");\r\n    }\r\n\r\n    function shutdown() {\r\n        return $http.get(\"internalapi/shutdown\");\r\n    }\r\n}\r\nNzbHydraControlService.$inject = [\"$http\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbDownloadService', NzbDownloadService);\r\n\r\nfunction NzbDownloadService($http, ConfigService, CategoriesService) {\r\n\r\n    var service = {\r\n        download: download\r\n    };\r\n\r\n    return service;\r\n\r\n\r\n    function sendNzbAddCommand(items, category) {\r\n        console.log(\"Now add nzb with category \" + category);\r\n        return $http.put(\"internalapi/addnzbs\", {items: angular.toJson(items), category: category});\r\n    }\r\n\r\n    function download(items) {\r\n        var settings = ConfigService.getSafe();\r\n\r\n        var category;\r\n        if (settings.downloader.downloader == \"nzbget\") {\r\n            category = settings.downloader.nzbget.defaultCategory\r\n        } else {\r\n            category = settings.downloader.sabnzbd.defaultCategory\r\n        }\r\n\r\n        if (_.isUndefined(category) || category == \"\" || category == null) {\r\n            return CategoriesService.openCategorySelection().then(function (category) {\r\n                return sendNzbAddCommand(items, category)\r\n            }, function (error) {\r\n                throw error;\r\n            });\r\n        } else {\r\n            return sendNzbAddCommand(items, category)\r\n        }\r\n    }\r\n}\r\nNzbDownloadService.$inject = [\"$http\", \"ConfigService\", \"CategoriesService\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ModalService', ModalService);\r\n\r\nfunction ModalService($uibModal) {\r\n    \r\n    return {\r\n        open: openModal\r\n    };\r\n    \r\n    function openModal(headline, message, ok, cancel) {\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'static/html/modal.html',\r\n            controller: 'ModalInstanceCtrl',\r\n            size: 'md',\r\n            resolve: {\r\n                headline: function () {\r\n                    return headline\r\n                },\r\n                message: function(){ return message},\r\n                ok: function() {\r\n                    return ok;\r\n                },\r\n                cancel: function() {\r\n                    return cancel;\r\n                },\r\n                showCancel: function() {\r\n                    return angular.isDefined(cancel);\r\n                }\r\n            }\r\n        });\r\n\r\n        modalInstance.result.then(function() {\r\n            \r\n        }, function() {\r\n            if (angular.isDefined(cancel))\r\n            cancel();\r\n        });\r\n    }\r\n    \r\n}\r\nModalService.$inject = [\"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ModalInstanceCtrl', ModalInstanceCtrl);\r\n\r\nfunction ModalInstanceCtrl($scope, $uibModalInstance, headline, message, ok, cancel, showCancel) {\r\n\r\n    $scope.message = message;\r\n    $scope.headline = headline;\r\n    $scope.showCancel = showCancel;\r\n\r\n    $scope.ok = function () {\r\n        $uibModalInstance.close();\r\n        if(!angular.isUndefined(ok)) {\r\n            ok();\r\n        }\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n        if (!angular.isUndefined(cancel)) {\r\n            cancel();\r\n        }\r\n    };\r\n}\r\nModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"headline\", \"message\", \"ok\", \"cancel\", \"showCancel\"];\r\n","angular\n    .module('nzbhydraApp')\n    .service('GeneralModalService', GeneralModalService);\n\nfunction GeneralModalService() {\n    \n    \n    this.open = function (msg, template, templateUrl, size, data) {\n        \n        //Prevent circular dependency\n        var myInjector = angular.injector([\"ng\", \"ui.bootstrap\"]);\n        var $uibModal = myInjector.get(\"$uibModal\");\n        var params = {};\n        \n        if(angular.isUndefined(size)) {\n            params[\"size\"] = size;\n        }\n        if (angular.isUndefined(template)) {\n            if (angular.isUndefined(templateUrl)) {\n                params[\"template\"] = '<pre>' + msg + '</pre>';\n            } else {\n                params[\"templateUrl\"] = templateUrl;\n            }\n        } else {\n            params[\"template\"] = template;\n        }\n        params[\"resolve\"] = \n        {\n            data: function () {\n                return data;\n            }\n        };\n        \n        var modalInstance = $uibModal.open(params);\n\n        modalInstance.result.then();\n\n    };\n    \n   \n}","var HEADER_NAME = 'MyApp-Handle-Errors-Generically';\nvar specificallyHandleInProgress = false;\n\nnzbhydraapp.factory('RequestsErrorHandler',  [\"$q\", \"growl\", \"blockUI\", \"GeneralModalService\", function ($q, growl, blockUI, GeneralModalService) {\n    return {\n        // --- The user's API for claiming responsiblity for requests ---\n        specificallyHandled: function (specificallyHandledBlock) {\n            specificallyHandleInProgress = true;\n            try {\n                return specificallyHandledBlock();\n            } finally {\n                specificallyHandleInProgress = false;\n            }\n        },\n\n        // --- Response interceptor for handling errors generically ---\n        responseError: function (rejection) {\n            blockUI.reset();\n            var shouldHandle = (rejection && rejection.config && rejection.config.headers && rejection.config.headers[HEADER_NAME] && !rejection.config.url.contains(\"logerror\"));\n            if (shouldHandle) {\n                var message = \"An error occured :<br>\" + rejection.status + \": \" + rejection.statusText;\n\n                if (rejection.data) {\n                    message += \"<br><br>\" + rejection.data;\n                }\n                GeneralModalService.open(message);\n\n            } else if (rejection && rejection.config && rejection.config.headers && rejection.config.headers[HEADER_NAME] && rejection.config.url.contains(\"logerror\")) {\n                console.log(\"Not handling connection error while sending exception to server\");\n            }\n\n            return $q.reject(rejection);\n        }\n    };\n}]);\n\n\nnzbhydraapp.config(['$provide', '$httpProvider', function ($provide, $httpProvider) {\n    $httpProvider.interceptors.push('RequestsErrorHandler');\n\n    // --- Decorate $http to add a special header by default ---\n\n    function addHeaderToConfig(config) {\n        config = config || {};\n        config.headers = config.headers || {};\n\n        // Add the header unless user asked to handle errors himself\n        if (!specificallyHandleInProgress) {\n            config.headers[HEADER_NAME] = true;\n        }\n\n        return config;\n    }\n\n    // The rest here is mostly boilerplate needed to decorate $http safely\n    $provide.decorator('$http', ['$delegate', function ($delegate) {\n        function decorateRegularCall(method) {\n            return function (url, config) {\n                return $delegate[method](url, addHeaderToConfig(config));\n            };\n        }\n\n        function decorateDataCall(method) {\n            return function (url, data, config) {\n                return $delegate[method](url, data, addHeaderToConfig(config));\n            };\n        }\n\n        function copyNotOverriddenAttributes(newHttp) {\n            for (var attr in $delegate) {\n                if (!newHttp.hasOwnProperty(attr)) {\n                    if (typeof($delegate[attr]) === 'function') {\n                        newHttp[attr] = function () {\n                            return $delegate.apply($delegate, arguments);\n                        };\n                    } else {\n                        newHttp[attr] = $delegate[attr];\n                    }\n                }\n            }\n        }\n\n        var newHttp = function (config) {\n            return $delegate(addHeaderToConfig(config));\n        };\n\n        newHttp.get = decorateRegularCall('get');\n        newHttp.delete = decorateRegularCall('delete');\n        newHttp.head = decorateRegularCall('head');\n        newHttp.jsonp = decorateRegularCall('jsonp');\n        newHttp.post = decorateDataCall('post');\n        newHttp.put = decorateDataCall('put');\n\n        copyNotOverriddenAttributes(newHttp);\n\n        return newHttp;\n    }]);\n}]);","hashCode = function (s) {\n    return s.split(\"\").reduce(function (a, b) {\n        a = ((a << 5) - a) + b.charCodeAt(0);\n        return a & a\n    }, 0);\n};\n\nangular\n    .module('nzbhydraApp')\n    .config([\"formlyConfigProvider\", function config(formlyConfigProvider) {\n        formlyConfigProvider.extras.removeChromeAutoComplete = true;\n        formlyConfigProvider.extras.explicitAsync = true;\n        formlyConfigProvider.disableWarnings = window.onProd;\n\n\n        formlyConfigProvider.setWrapper({\n            name: 'settingWrapper',\n            templateUrl: 'setting-wrapper.html'\n        });\n\n\n        formlyConfigProvider.setWrapper({\n            name: 'fieldset',\n            template: [\n                '<fieldset>',\n                '<legend>{{options.templateOptions.label}}</legend>',\n                '<formly-transclude></formly-transclude>',\n                '</fieldset>'\n            ].join(' ')\n        });\n\n        formlyConfigProvider.setType({\n            name: 'help',\n            template: [\n                '<div class=\"panel panel-default\">',\n                '<div class=\"panel-body\">',\n                '<div ng-repeat=\"line in options.templateOptions.lines\">{{ line }}</div>',\n                '</div>',\n                '</div>'\n            ].join(' ')\n        });\n\n\n        formlyConfigProvider.setWrapper({\n            name: 'logicalGroup',\n            template: [\n                '<formly-transclude></formly-transclude>'\n            ].join(' ')\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalInput',\n            extends: 'input',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n        formlyConfigProvider.setType({\n            name: 'timeOfDay',\n            extends: 'horizontalInput',\n            controller: ['$scope', function ($scope) {\n                $scope.model[$scope.options.key] = new Date($scope.model[$scope.options.key]);\n            }]\n        });\n\n        formlyConfigProvider.setType({\n            name: 'percentInput',\n            template: [\n                '<input type=\"number\" class=\"form-control\" placeholder=\"Percent\" ng-model=\"model[options.key]\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" required />'\n            ].join(' ')\n        });\n\n        formlyConfigProvider.setType({\n            name: 'apiKeyInput',\n            template: [\n                '<div class=\"input-group\">',\n                '<input type=\"text\" class=\"form-control\" ng-model=\"model[options.key]\"/>',\n                '<span class=\"input-group-btn input-group-btn2\">',\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"generate()\"><span class=\"glyphicon glyphicon-refresh\"></span></button>',\n                '</div>'\n            ].join(' '),\n            controller: function ($scope) {\n                $scope.generate = function () {\n                    $scope.model[$scope.options.key] = (Math.random() * 1e32).toString(36);\n                }\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'testConnection',\n            templateUrl: 'button-test-connection.html'\n        });\n\n        formlyConfigProvider.setType({\n            name: 'checkCaps',\n            templateUrl: 'button-check-caps.html',\n            controller: function ($scope) {\n                $scope.message = \"\";\n                $scope.uniqueId = hashCode($scope.model.name) + hashCode($scope.model.host);\n\n                var testButton = \"#button-check-caps-\" + $scope.uniqueId;\n                var testMessage = \"#message-check-caps-\" + $scope.uniqueId;\n\n                function showSuccess() {\n                    angular.element(testButton).removeClass(\"btn-default\");\n                    angular.element(testButton).removeClass(\"btn-danger\");\n                    angular.element(testButton).addClass(\"btn-success\");\n                }\n\n                function showError() {\n                    angular.element(testButton).removeClass(\"btn-default\");\n                    angular.element(testButton).removeClass(\"btn-success\");\n                    angular.element(testButton).addClass(\"btn-danger\");\n                }\n\n                $scope.checkCaps = function () {\n                    angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\n                    var myInjector = angular.injector([\"ng\"]);\n                    var $http = myInjector.get(\"$http\");\n                    var url;\n                    var params;\n\n                    url = \"internalapi/test_caps\";\n                    params = {indexer: $scope.model.name, apikey: $scope.model.apikey, host: $scope.model.host};\n                    $http.get(url, {params: params}).success(function (result) {\n                        //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \n                        if (result.success) {\n                            angular.element(testMessage).text(\"Supports: \" + result.ids + \",\" + result.types);\n                            $scope.$apply(function () {\n                                $scope.model.search_ids = result.ids;\n                                $scope.model.searchTypes = result.types;\n                            });\n                            showSuccess();\n                        } else {\n                            angular.element(testMessage).text(result.message);\n                            showError();\n                        }\n\n                    }).error(function () {\n                        angular.element(testMessage).text(result.message);\n                        showError();\n                    }).finally(function () {\n                        angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\n                    })\n                }\n            }\n        });\n\n\n        formlyConfigProvider.setType({\n            name: 'horizontalTestConnection',\n            extends: 'testConnection',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalCheckCaps',\n            extends: 'checkCaps',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n\n        formlyConfigProvider.setType({\n            name: 'horizontalApiKeyInput',\n            extends: 'apiKeyInput',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalPercentInput',\n            extends: 'percentInput',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n\n        formlyConfigProvider.setType({\n            name: 'switch',\n            template: [\n                '<div style=\"text-align:left\"><input bs-switch type=\"checkbox\" ng-model=\"model[options.key]\"/></div>'\n            ].join(' ')\n\n        });\n\n\n        formlyConfigProvider.setType({\n            name: 'duoSetting',\n            extends: 'input',\n            defaultOptions: {\n                className: 'col-md-9',\n                templateOptions: {\n                    type: 'number',\n                    noRow: true,\n                    label: ''\n                }\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalSwitch',\n            extends: 'switch',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalSelect',\n            extends: 'select',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n\n        formlyConfigProvider.setType({\n            name: 'horizontalMultiselect',\n            defaultOptions: {\n                templateOptions: {\n                    optionsAttr: 'bs-options',\n                    ngOptions: 'option[to.valueProp] as option in to.options | filter: $select.search',\n                    valueProp: 'id',\n                    labelProp: 'label'\n                }\n            },\n            templateUrl: 'ui-select-multiple.html',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n\n        formlyConfigProvider.setType({\n            name: 'label',\n            template: '<label class=\"control-label\">{{to.label}}</label>'\n        });\n\n        formlyConfigProvider.setType({\n            name: 'duolabel',\n            extends: 'label',\n            defaultOptions: {\n                className: 'col-md-2',\n                templateOptions: {\n                    label: '-'\n                }\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'repeatSection',\n            templateUrl: 'repeatSection.html',\n            controller: function ($scope) {\n                $scope.formOptions = {formState: $scope.formState};\n                $scope.addNew = addNew;\n                $scope.remove = remove;\n                $scope.copyFields = copyFields;\n\n                function copyFields(fields) {\n                    fields = angular.copy(fields);\n                    $scope.repeatfields = fields;\n                    return fields;\n                }\n\n                $scope.clear = function (field) {\n                    return _.mapObject(field, function (key, val) {\n                        if (typeof val === 'object') {\n                            return $scope.clear(val);\n                        }\n                        return undefined;\n\n                    });\n                };\n\n\n                function addNew() {\n                    $scope.model[$scope.options.key] = $scope.model[$scope.options.key] || [];\n                    var repeatsection = $scope.model[$scope.options.key];\n                    var newsection = angular.copy($scope.options.templateOptions.defaultModel);\n                    repeatsection.push(newsection);\n                }\n\n                function remove($index) {\n                    $scope.model[$scope.options.key].splice($index, 1);\n                }\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'indexers',\n            templateUrl: 'indexers.html',\n            controller: function ($scope, $uibModal) {\n                $scope.formOptions = {formState: $scope.formState};\n                $scope._showIndexerBox = _showIndexerBox;\n                $scope.showIndexerBox = showIndexerBox;\n                $scope.isInitial = false;\n\n                $scope.presets = [\n                    {\n                        name: \"6box\",\n                        host: \"https://6box.me\",\n                        searchIds: [\"imdbid\"]\n                    },\n                    {\n                        name: \"6box nzedb\",\n                        host: \"https://nzedb.6box.me\",\n                        searchIds: [\"rid\", \"imdbid\"]\n                    },\n                    {\n                        name: \"6box nntmux\",\n                        host: \"https://nn-tmux.6box.me\",\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\"]\n                    },\n                    {\n                        name: \"DogNZB\",\n                        host: \"https://api.dognzb.cr\",\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\"]\n                    },\n                    {\n                        name: \"Drunken Slug\",\n                        host: \"https://drunkenslug.com\",\n                        searchIds: [\"tvdbid\", \"imdbid\", \"tvmazeid\", \"traktid\", \"tmdbid\"]\n                    },\n                    {\n                        name: \"NZB Finder\",\n                        host: \"https://nzbfinder.ws\",\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\", \"tvmazeid\", \"traktid\", \"tmdbid\"]\n                    },\n                    {\n                        name: \"NZBs.org\",\n                        host: \"https://nzbs.org\",\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\", \"tvmazeid\"]\n                    },\n                    {\n                        name: \"nzb.su\",\n                        host: \"https://api.nzb.su\",\n                        searchIds: [\"rid\", \"imdbid\"]\n                    },\n                    {\n                        name: \"NZBGeek\",\n                        host: \"https://api.nzbgeek.info\",\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\"]\n                    }\n                ];\n\n                function _showIndexerBox(model, parentModel, isInitial, callback) {\n                    var modalInstance = $uibModal.open({\n                        templateUrl: 'indexerModal.html',\n                        controller: 'IndexerModalInstanceController',\n                        size: 'lg',\n                        resolve: {\n                            model: function () {\n                                return model;\n                            },\n                            fields: function () {\n                                var fieldset = [];\n\n\n                                fieldset.push({\n                                    key: 'enabled',\n                                    type: 'horizontalSwitch',\n                                    templateOptions: {\n                                        type: 'switch',\n                                        label: 'Enabled'\n                                    }\n                                });\n\n                                if (model.type == 'newznab') {\n                                    fieldset.push(\n                                        {\n                                            key: 'name',\n                                            type: 'horizontalInput',\n                                            hideExpression: '!model.enabled',\n                                            templateOptions: {\n                                                type: 'text',\n                                                label: 'Name',\n                                                required: true,\n                                                help: 'Used for identification. Changing the name will lose all history and stats!'\n                                            }\n                                        })\n                                }\n                                if (model.type == 'newznab') {\n                                    fieldset.push(\n                                        {\n                                            key: 'host',\n                                            type: 'horizontalInput',\n                                            hideExpression: '!model.enabled',\n                                            templateOptions: {\n                                                type: 'text',\n                                                label: 'Host',\n                                                required: true,\n                                                placeholder: 'http://www.someindexer.com'\n                                            },\n                                            watcher: {\n                                                listener: function (field, newValue, oldValue, scope) {\n                                                    if (newValue != oldValue) {\n                                                        scope.$parent.needsConnectionTest = true;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    )\n                                }\n\n                                if (model.type == 'newznab' || model.type == 'omgwtf') {\n                                    fieldset.push(\n                                        {\n                                            key: 'apikey',\n                                            type: 'horizontalInput',\n                                            hideExpression: '!model.enabled',\n                                            templateOptions: {\n                                                type: 'text',\n                                                required: true,\n                                                label: 'API Key'\n                                            },\n                                            watcher: {\n                                                listener: function (field, newValue, oldValue, scope) {\n                                                    if (newValue != oldValue) {\n                                                        scope.$parent.needsConnectionTest = true;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    )\n                                }\n\n                                if (model.type == 'omgwtf') {\n                                    fieldset.push(\n                                        {\n                                            key: 'username',\n                                            type: 'horizontalInput',\n                                            hideExpression: '!model.enabled',\n                                            templateOptions: {\n                                                type: 'text',\n                                                required: true,\n                                                label: 'Username'\n                                            },\n                                            watcher: {\n                                                listener: function (field, newValue, oldValue, scope) {\n                                                    if (newValue != oldValue) {\n                                                        scope.$parent.needsConnectionTest = true;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    )\n                                }\n\n                                fieldset.push(\n                                    {\n                                        key: 'score',\n                                        type: 'horizontalInput',\n                                        hideExpression: '!model.enabled',\n                                        templateOptions: {\n                                            type: 'number',\n                                            label: 'Score',\n                                            required: true,\n                                            help: 'When duplicate search results are found the result from the indexer with the highest score will be shown'\n                                        }\n                                    });\n\n                                fieldset.push(\n                                    {\n                                        key: 'timeout',\n                                        type: 'horizontalInput',\n                                        hideExpression: '!model.enabled',\n                                        templateOptions: {\n                                            type: 'number',\n                                            label: 'Timeout',\n                                            help: 'Supercedes the general timeout in \"Searching\"'\n                                        }\n                                    });\n\n                                if (model.type == \"newznab\") {\n                                    fieldset.push(\n                                        {\n                                            key: 'hitLimit',\n                                            type: 'horizontalInput',\n                                            hideExpression: '!model.enabled',\n                                            templateOptions: {\n                                                type: 'number',\n                                                label: 'API hit limit',\n                                                help: 'Maximum number of API hits since \"API hit reset time\"'\n                                            }\n                                        }\n                                    );\n                                    fieldset.push(\n                                        {\n                                            key: 'hitLimitResetTime',\n                                            type: 'timeOfDay',\n                                            hideExpression: '!model.enabled || !model.hitLimit',\n                                            templateOptions: {\n                                                type: 'time',\n                                                label: 'API hit reset time',\n                                                help: 'Local time at which the API hit counter is reset'\n                                            }\n                                        });\n                                    fieldset.push(\n                                        {\n                                            key: 'username',\n                                            type: 'horizontalInput',\n                                            hideExpression: '!model.enabled',\n                                            templateOptions: {\n                                                type: 'text',\n                                                required: false,\n                                                label: 'Username',\n                                                help: 'Only needed if indexer requires HTTP auth for API access (rare)'\n                                            },\n                                            watcher: {\n                                                listener: function (field, newValue, oldValue, scope) {\n                                                    if (newValue != oldValue) {\n                                                        scope.$parent.needsConnectionTest = true;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    );\n                                    fieldset.push(\n                                        {\n                                            key: 'password',\n                                            type: 'horizontalInput',\n                                            hideExpression: '!model.enabled || !model.username',\n                                            templateOptions: {\n                                                type: 'text',\n                                                required: false,\n                                                label: 'Password',\n                                                help: 'Only needed if indexer requires HTTP auth for API access (rare)'\n                                            }\n                                        }\n                                    )\n\n                                }\n\n\n                                if (model.type != \"womble\") {\n                                    fieldset.push(\n                                        {\n                                            key: 'preselect',\n                                            type: 'horizontalSwitch',\n                                            hideExpression: '!model.enabled || model.accessType == \"external\"',\n                                            templateOptions: {\n                                                type: 'switch',\n                                                label: 'Preselect',\n                                                help: 'Preselect this indexer on the search page'\n                                            }\n                                        }\n                                    );\n                                    fieldset.push(\n                                        {\n                                            key: 'accessType',\n                                            type: 'horizontalSelect',\n                                            hideExpression: '!model.enabled',\n                                            templateOptions: {\n                                                label: 'Enable for...',\n                                                options: [\n                                                    {name: 'Internal searches only', value: 'internal'},\n                                                    {name: 'API searches only', value: 'external'},\n                                                    {name: 'Internal and API searches', value: 'both'}\n                                                ]\n                                            }\n                                        }\n                                    )\n                                }\n\n                                if (model.type == 'newznab') {\n                                    fieldset.push(\n                                        {\n                                            key: 'search_ids',\n                                            type: 'horizontalMultiselect',\n                                            hideExpression: '!model.enabled',\n                                            templateOptions: {\n                                                label: 'Search IDs',\n                                                options: [\n                                                    {label: 'TVDB', id: 'tvdbid'},\n                                                    {label: 'TVRage', id: 'rid'},\n                                                    {label: 'IMDB', id: 'imdbid'},\n                                                    {label: 'Trakt', id: 'traktid'},\n                                                    {label: 'TVMaze', id: 'tvmazeid'},\n                                                    {label: 'TMDB', id: 'tmdbid'}\n                                                ]\n                                            }\n                                        }\n                                    );\n                                    fieldset.push(\n                                        {\n                                            key: 'searchTypes',\n                                            type: 'horizontalMultiselect',\n                                            hideExpression: '!model.enabled',\n                                            templateOptions: {\n                                                label: 'Search types',\n                                                options: [\n                                                    {label: 'Movies', id: 'movie'},\n                                                    {label: 'TV', id: 'tvsearch'},\n                                                    {label: 'Ebooks', id: 'book'},\n                                                    {label: 'Audio', id: 'audio'}\n                                                ]\n                                            }\n                                        }\n                                    )\n                                }\n\n                                if (model.type == 'newznab') {\n                                    fieldset.push(\n                                        {\n                                            type: 'horizontalCheckCaps',\n                                            hideExpression: '!model.enabled || !model.host || !model.apikey || !model.name || angular.isUndefined(model.searchTypes)',\n                                            templateOptions: {\n                                                label: 'Check search types',\n                                                help: 'Find out what search types the indexer supports. Done automatically for new indexers.'\n                                            }\n                                        }\n                                    )\n                                }\n\n                                if (model.type == 'nzbindex') {\n                                    fieldset.push(\n                                        {\n                                            key: 'generalMinSize',\n                                            type: 'horizontalInput',\n                                            hideExpression: '!model.enabled',\n                                            templateOptions: {\n                                                type: 'number',\n                                                label: 'Min size',\n                                                help: 'NZBIndex returns a lot of crap with small file sizes. Set this value and all smaller results will be filtered out no matter the category'\n                                            }\n                                        }\n                                    );\n                                }\n\n                                return fieldset;\n                            },\n                            isInitial: function () {\n                                return isInitial\n                            },\n                            parentModel: function () {\n                                return parentModel;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function () {\n                        $scope.form.$setDirty(true);\n                        if (angular.isDefined(callback)) {\n                            callback(true);\n                        }\n                    }, function () {\n                        console.log(\"Indexer cancelled\");\n                        if (angular.isDefined(callback)) {\n                            callback(false);\n                        }\n                    });\n                }\n\n                function showIndexerBox(model, parentModel) {\n                    $scope._showIndexerBox(model, parentModel, false)\n                }\n\n                $scope.addIndexer = function (indexers, preset) {\n                    var model = {\n                        enabled: true,\n                        host: null,\n                        apikey: null,\n                        hitLimit: null,\n                        hitLimitResetTime: new Date(0),\n                        timeout: null,\n                        name: null,\n                        showOnSearch: true,\n                        score: 0,\n                        username: null,\n                        password: null,\n                        preselect: true,\n                        type: 'newznab',\n                        accessType: \"both\",\n                        search_ids: undefined, //[\"imdbid\", \"rid\", \"tvdbid\"],\n                        searchTypes: undefined, //[\"tvsearch\", \"movie\"]\n                    };\n                    if (angular.isDefined(preset)) {\n                        model.name = preset.name;\n                        model.host = preset.host;\n                        model.search_ids = preset.searchIds;\n                    }\n\n                    $scope.isInitial = true;\n\n                    $scope._showIndexerBox(model, indexers, true, function (isSubmitted) {\n                        if (isSubmitted) {\n                            console.log(\"Pusing to model\");\n                            indexers.push(model);\n                        }\n                    });\n                };\n\n            }\n\n        });\n\n    }]);\n\nangular\n    .module('nzbhydraApp').run([\"formlyConfig\", \"formlyValidationMessages\", function (formlyConfig, formlyValidationMessages) {\n\n    formlyValidationMessages.addStringMessage('required', 'This field is required');\n\n    formlyConfig.extras.errorExistsAndShouldBeVisibleExpression = 'fc.$touched || form.$submitted';\n\n}]);\n\n\nangular.module('nzbhydraApp').controller('IndexerModalInstanceController', [\"$scope\", \"$uibModalInstance\", \"$http\", \"model\", \"fields\", \"isInitial\", \"parentModel\", \"growl\", \"ModalService\", \"blockUI\", function ($scope, $uibModalInstance, $http, model, fields, isInitial, parentModel, growl, ModalService, blockUI) {\n\n    $scope.model = model;\n    $scope.fields = fields;\n    $scope.isInitial = isInitial;\n    $scope.spinnerActive = false;\n    $scope.needsConnectionTest = false;\n\n    console.log($uibModalInstance);\n\n\n    function checkConnection(onSuccess, onUnsuccessful, onError) {\n        console.log(\"Connection test needed\");\n        $scope.spinnerActive = true;\n        var url;\n        var params;\n        if (model.type == \"newznab\") {\n            url = \"internalapi/test_newznab\";\n            params = {host: model.host, apikey: model.apikey};\n        } else if (model.type == \"omgwtf\") {\n            url = \"internalapi/test_omgwtf\";\n            params = {username: model.username, apikey: model.apikey};\n        }\n\n        $http.get(url, {params: params}).success(function (result) {\n            //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \n            if (result.result) {\n                if (angular.isDefined(onSuccess)) {\n                    onSuccess();\n                }\n            } else {\n                if (angular.isDefined(onUnsuccessful)) {\n                    onUnsuccessful(result.message);\n                }\n            }\n\n        }).error(function (result) {\n            if (angular.isDefined(onError)) {\n                onError(result.message);\n            }\n        }).finally(function () {\n            $scope.spinnerActive = false;\n        });\n    }\n\n    function checkCaps(onSuccess, onError) {\n        $scope.spinnerActive = true;\n        var url;\n        var params;\n\n        url = \"internalapi/test_caps\";\n        params = {indexer: model.name, apikey: model.apikey, host: model.host};\n        $http.get(url, {params: params}).success(function (result) {\n            //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \n            if (result.success) {\n                if (angular.isDefined(onSuccess)) {\n                    onSuccess(result.ids, result.types);\n                }\n            } else {\n                if (angular.isDefined(onError)) {\n                    onError();\n                }\n            }\n\n        }).error(function () {\n            if (angular.isDefined(onError)) {\n                onError(result.message);\n            }\n        }).finally(function () {\n            $scope.spinnerActive = false;\n        })\n    }\n\n    function checkCapsOrSubmit() {\n        if (angular.isUndefined(model.search_ids) || angular.isUndefined(model.searchTypes)) {\n            console.log(\"We need to check the caps first\");\n            blockUI.start(\"New indexer found. Testing its capabilities. This may take a bit...\");\n            checkCaps(\n                function (ids, types) {\n                    blockUI.reset();\n                    growl.info(\"Successfully tested capabilites of indexer. Supports: \" + ids + \",\" + types);\n                    model.search_ids = ids;\n                    model.searchTypes = types;\n                    $uibModalInstance.close($scope);\n                },\n                function () {\n                    blockUI.reset();\n                    ModalService.open(\"Error testing capabilities\", \"The capabilities of the indexer could not be checked. The indexer won't be used for ID based searches (IMDB, TVDB, etc.). You may repeat the check manually at any time.\", function () {\n                        $uibModalInstance.close($scope);\n                    });\n                    model.search_ids = [];\n                    model.searchTypes = [];\n                })\n        } else {\n            $uibModalInstance.close($scope);\n        }\n    }\n\n    $scope.obSubmit = function () {\n        if ($scope.form.$valid) {\n            if ($scope.needsConnectionTest) {\n                checkConnection(\n                    function () {\n                        console.log(\"Form is valid and connection was tested successfully\");\n                        checkCapsOrSubmit();\n                    },\n                    function (message) {\n                        console.log(\"Form is valid but connection was not tested successfully\");\n                        growl.error(\"The connection to the indexer failed: \" + message);\n                    },\n                    function () {\n                        console.log(\"Form is valid but connection was not tested successfully\");\n                        growl.error(\"The connection to the indexer could not be tested, sorry\");\n                    });\n            } else {\n                console.log(\"No connection test needed\");\n                checkCapsOrSubmit();\n            }\n        } else {\n            growl.error(\"Config invalid. Please check your settings.\");\n            console.log($scope);\n            angular.forEach($scope.form.$error.required, function (field) {\n                field.$setTouched();\n            });\n        }\n    };\n\n    $scope.reset = function () {\n        console.log(\"Cancelling\");\n        $scope.reset();\n    };\n\n    $scope.deleteIndexer = function () {\n        parentModel.splice(parentModel.indexOf(model), 1);\n        $uibModalInstance.close($scope);\n    };\n\n    $scope.reset = function () {\n        console.log(\"Resetting to original model\");\n        for (var i = 0; i < $scope.fields.length; i++) {\n            if (angular.isDefined($scope.fields[i].resetModel)) {\n                $scope.fields[i].resetModel();\n            }\n        }\n\n    };\n\n    $scope.$on(\"modal.closing\", function (targetScope, reason, c) {\n        console.log(\"Closing\");\n\n        if (reason == \"backdrop click\") {\n            $scope.reset();\n        }\n    });\n}]);","var filters = angular.module('filters', []);\r\n\r\nfilters.filter('bytes', function() {\r\n\treturn function(bytes, precision) {\r\n\t\tif (isNaN(parseFloat(bytes)) || !isFinite(bytes) || bytes == 0) return '-';\r\n\t\tif (typeof precision === 'undefined') precision = 1;\r\n\t\t\r\n\t\tvar units = ['b', 'kB', 'MB', 'GB', 'TB', 'PB'],\r\n\t\t\tnumber = Math.floor(Math.log(bytes) / Math.log(1024));\r\n\t\treturn (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) +   units[number];\r\n\t}\r\n});\r\n\r\nfilters.filter('unsafe', \r\n\t[\"$sce\", function ($sce) {\r\n\t\treturn function (value, type) {\r\n\t\t\treturn $sce.trustAs(type || 'html', text);\r\n\t\t};\r\n\t}]\r\n);","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigService', ConfigService);\r\n\r\nfunction ConfigService($http, $q, $cacheFactory) {\r\n\r\n    var cache = $cacheFactory(\"nzbhydra\");\r\n\r\n    return {\r\n        set: set,\r\n        get: get,\r\n        getSafe: getSafe,\r\n        invalidateSafe: invalidateSafe,\r\n        maySeeAdminArea: maySeeAdminArea\r\n    };\r\n\r\n\r\n    function set(newConfig) {\r\n        $http.put('internalapi/setsettings', newConfig)\r\n            .then(function (successresponse) {\r\n                console.log(\"Settings saved. Updating cache\");\r\n                cache.put(\"config\", newConfig);\r\n            }, function (errorresponse) {\r\n                console.log(\"Error saving settings: \" + errorresponse);\r\n            });\r\n    }\r\n\r\n    function get() {\r\n        var config = cache.get(\"config\");\r\n        if (angular.isUndefined(config)) {\r\n            config = $http.get('internalapi/getconfig').then(function (data) {\r\n                return data.data;\r\n            });\r\n            cache.put(\"config\", config);\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    function getSafe() {\r\n        var safeconfig = cache.get(\"safeconfig\");\r\n        if (angular.isDefined(safeconfig)) {\r\n            return safeconfig;\r\n        }\r\n        \r\n        return $http.get('internalapi/getsafeconfig').then(function (data) {\r\n            cache.put(\"safeconfig\", data.data);\r\n            return data.data;\r\n        });\r\n\r\n\r\n    }\r\n\r\n    function invalidateSafe() {\r\n        cache.remove(\"safeconfig\");\r\n    }\r\n\r\n    function maySeeAdminArea() {\r\n        function loadAll() {\r\n            var maySeeAdminArea = cache.get(\"maySeeAdminArea\");\r\n            if (!angular.isUndefined(maySeeAdminArea)) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(maySeeAdminArea);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get('internalapi/mayseeadminarea')\r\n                .then(function (configResponse) {\r\n                    var config = configResponse.data;\r\n                    cache.put(\"maySeeAdminArea\", config);\r\n                    return configResponse.data;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (maySeeAdminArea) {\r\n            return maySeeAdminArea;\r\n        });\r\n    }\r\n}\r\nConfigService.$inject = [\"$http\", \"$q\", \"$cacheFactory\"];","angular\n    .module('nzbhydraApp')\n    .factory('ConfigFields', ConfigFields);\n\nfunction ConfigFields() {\n\n    var restartWatcher;\n\n    return {\n        getFields: getFields,\n        setRestartWatcher: setRestartWatcher\n    };\n\n    function setRestartWatcher(restartWatcherFunction) {\n        restartWatcher = restartWatcherFunction;\n    }\n\n\n    function restartListener(field, newValue, oldValue) {\n        if (newValue != oldValue) {\n            restartWatcher();\n        }\n    }\n\n    \n\n    function ipValidator() {\n        return {\n            expression: function ($viewValue, $modelValue) {\n                var value = $modelValue || $viewValue;\n                if (value) {\n                    return /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(value)\n                        || /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/.test(value);\n                }\n                return true;\n            },\n            message: '$viewValue + \" is not a valid IP Address\"'\n        };\n    }\n\n    function authValidatorDontLockYourselfOut(rootModel) {\n        return {\n            expression: function ($viewValue, $modelValue, scope) {\n                var value = $viewValue || $modelValue;\n                if (value) {\n                    return true;\n                }\n                if (rootModel.auth.users.length > 0) {\n                    return _.any(rootModel.auth.users, function (user) {\n                        return scope.model.username != user.username && user.maySeeAdmin;\n                    })\n                }\n                return true;\n            },\n            message: '\"If you have users at least one should have admin rights or you lock yourself out\"'\n        };\n    }\n\n    function regexValidator(regex, message, prefixViewValue) {\n        return {\n            expression: function ($viewValue, $modelValue) {\n                var value = $modelValue || $viewValue;\n                if (value) {\n                    return regex.test(value);\n                }\n                return true;\n            },\n\n            message: (prefixViewValue ? '$viewValue + \" ' : '\" ') + message + '\"'\n        };\n    }\n\n    function getFields(rootModel) {\n        return {\n            main: [\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {label: 'Hosting'},\n                    fieldGroup: [\n                        {\n                            key: 'host',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Host',\n                                required: true,\n                                placeholder: 'IPv4 address to bind to',\n                                help: 'I strongly recommend using a reverse proxy instead of exposing this directly. Requires restart.'\n                            },\n                            validators: {\n                                ipAddress: ipValidator()\n                            },\n                            watcher: {\n                                listener: restartListener\n                            }\n                        },\n                        {\n                            key: 'port',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'Port',\n                                required: true,\n                                placeholder: '5050',\n                                help: 'Requires restart'\n                            },\n                            validators: {\n                                port: regexValidator(/^\\d{1,5}$/, \"is no valid port\", true)\n                            },\n                            watcher: {\n                                listener: restartListener\n                            }\n                        },\n                        {\n                            key: 'urlBase',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'URL base',\n                                placeholder: '/nzbhydra',\n                                help: 'Set when using an external proxy. Call using a trailing slash, e.g. http://www.domain.com/nzbhydra/'\n                            },\n                            validators: {\n                                urlBase: regexValidator(/^\\/[\\w\\/]*$/, \"Base URL needs to start with a slash and must not end with one\")\n                            }\n                        },\n                        {\n                            key: 'externalUrl',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'External URL',\n                                placeholder: 'https://www.somedomain.com/nzbhydra/',\n                                help: 'Set to the full external URL so machines outside can use the generated NZB links.'\n                            }\n                        },\n                        {\n                            key: 'useLocalUrlForApiAccess',\n                            type: 'horizontalSwitch',\n                            hideExpression: '!model.externalUrl',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Use local address in API results',\n                                help: 'Disable to make API results use the external URL in NZB links.'\n                            }\n                        },\n                        {\n                            key: 'ssl',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Use SSL',\n                                help: 'I recommend using a reverse proxy instead of this. Requires restart.'\n                            },\n                            watcher: {\n                                listener: restartListener\n                            }\n                        },\n                        {\n                            key: 'sslcert',\n                            hideExpression: '!model.ssl',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'SSL certificate file',\n                                required: true,\n                                help: 'Requires restart.'\n                            },\n                            watcher: {\n                                listener: restartListener\n                            }\n                        },\n                        {\n                            key: 'sslkey',\n                            hideExpression: '!model.ssl',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'SSL key file',\n                                required: true,\n                                help: 'Requires restart.'\n                            },\n                            watcher: {\n                                listener: restartListener\n                            }\n                        }\n\n                    ]\n                },\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {label: 'UI'},\n                    fieldGroup: [\n\n                        {\n                            key: 'theme',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                type: 'select',\n                                label: 'Theme',\n                                help: 'Reload page after saving',\n                                options: [\n                                    {name: 'Default', value: 'default'},\n                                    {name: 'Dark', value: 'dark'}\n                                ]\n                            }\n                        }\n                    ]\n                },\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {label: 'Security'},\n                    fieldGroup: [\n\n                        {\n                            key: 'apikey',\n                            type: 'horizontalApiKeyInput',\n                            templateOptions: {\n                                label: 'API key',\n                                help: 'Remove to disable. Alphanumeric only'\n                            },\n                            validators: {\n                                apikey: regexValidator(/^[a-zA-Z0-9]*$/, \"API key must only contain numbers and digits\", false)\n                            }\n                        }\n                    ]\n                },\n\n                {\n                    wrapper: 'fieldset',\n                    key: 'logging',\n                    templateOptions: {label: 'Logging'},\n                    fieldGroup: [\n                        {\n                            key: 'logfilelevel',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                type: 'select',\n                                label: 'Logfile level',\n                                options: [\n                                    {name: 'Critical', value: 'CRITICAL'},\n                                    {name: 'Error', value: 'ERROR'},\n                                    {name: 'Warning', value: 'WARNING'},\n                                    {name: 'Info', value: 'INFO'},\n                                    {name: 'Debug', value: 'DEBUG'}\n                                ]\n                            },\n                            watcher: {\n                                listener: restartListener\n                            }\n                        },\n                        {\n                            key: 'logfilename',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Log file',\n                                required: true\n                            },\n                            watcher: {\n                                listener: restartListener\n                            }\n                        },\n                        {\n                            key: 'consolelevel',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                type: 'select',\n                                label: 'Console log level',\n                                options: [\n                                    {name: 'Critical', value: 'CRITICAL'},\n                                    {name: 'Error', value: 'ERROR'},\n                                    {name: 'Warning', value: 'WARNING'},\n                                    {name: 'Info', value: 'INFO'},\n                                    {name: 'Debug', value: 'DEBUG'}\n                                ]\n                            },\n                            watcher: {\n                                listener: restartListener\n                            }\n                        }\n\n\n                    ]\n                },\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {label: 'Updating'},\n                    fieldGroup: [\n\n                        {\n                            key: 'gitPath',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                label: 'Git executable',\n                                help: 'Set if git is not in your path'\n                            }\n                        },\n                        {\n                            key: 'branch',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Repository branch',\n                                required: true,\n                                help: 'Stay on master. Seriously...'\n                            }\n                        }\n                    ]\n                },\n\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {label: 'Other'},\n                    fieldGroup: [\n                        {\n                            key: 'debug',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Enable debugging',\n                                help: \"Only do this if you know what and why you're doing it\"\n                            }\n                        },\n                        {\n                            key: 'runThreaded',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Run threaded server',\n                                help: 'Requires restart'\n                            },\n                            watcher: {\n                                listener: restartListener\n                            }\n                        },\n                        {\n                            key: 'startupBrowser',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Open browser on startup'\n                            }\n                        }\n                    ]\n                }\n            ],\n\n            searching: [\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {\n                        label: 'Indexer access'\n                    },\n                    fieldGroup: [\n                        {\n                            key: 'timeout',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'Timeout when accessing indexers',\n                                addonRight: {\n                                    text: 'seconds'\n                                }\n                            }\n                        },\n                        {\n                            key: 'ignoreTemporarilyDisabled',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Ignore temporarily disabled',\n                                help: \"If enabled access to indexers will never be paused after an error occurred\"\n                            }\n                        },\n                        {\n                            key: 'ignorePassworded',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Ignore passworded releases',\n                                help: \"Not all indexers provide this information\"\n                            }\n                        },\n                        {\n                            key: 'ignoreWords',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Ignore results with ...',\n                                placeholder: 'separate, with, commas, like, this',\n                                help: \"Results with any of these words in the title will be ignored\"\n                            }\n                        },\n                        {\n                            key: 'requireWords',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Only accept results with ...',\n                                placeholder: 'separate, with, commas, like, this',\n                                help: \"Only results with at least of these words in the title will be displayed\"\n                            }\n                        },\n                        {\n                            key: 'maxAge',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'Maximum results age',\n                                help: 'Results older than this are ignored. Can be overwritten per search.',\n                                addonRight: {\n                                    text: 'days'\n                                }\n                            }\n                        },\n                        {\n                            key: 'generate_queries',\n                            type: 'horizontalMultiselect',\n                            templateOptions: {\n                                label: 'Generate queries',\n                                options: [\n                                    {label: 'Internal searches', id: 'internal'},\n                                    {label: 'API searches', id: 'external'}\n                                ],\n                                help: \"Generate queries for indexers which do not support ID based searches\"\n                            }\n                        },\n                        {\n                            key: 'userAgent',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'User agent',\n                                required: true\n                            }\n                        }\n\n                    ]\n                },\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {\n                        label: 'Result processing'\n                    },\n                    fieldGroup: [\n                        {\n                            key: 'htmlParser',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                type: 'select',\n                                label: 'HTML parser',\n                                options: [\n                                    {name: 'Default BS (slow)', value: 'html.parser'},\n                                    {name: 'LXML (faster, needs to be installed separately)', value: 'lxml'}\n                                ]\n                            }\n                        },\n                        {\n                            key: 'duplicateSizeThresholdInPercent',\n                            type: 'horizontalPercentInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Duplicate size threshold',\n                                required: true,\n                                addonRight: {\n                                    text: '%'\n                                }\n\n                            }\n                        },\n                        {\n                            key: 'duplicateAgeThreshold',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'Duplicate age threshold',\n                                required: true,\n                                addonRight: {\n                                    text: 'seconds'\n                                }\n                            }\n                        },\n                        {\n                            key: 'removeDuplicatesExternal',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Remove API duplicates',\n                                help: 'Remove duplicates when searching via API'\n                            }\n                        }\n                    ]\n                },\n\n                {\n                    wrapper: 'fieldset',\n                    key: 'categorysizes',\n                    templateOptions: {label: 'Category sizes'},\n                    fieldGroup: [\n\n                        {\n                            key: 'enable_category_sizes',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Category sizes',\n                                help: \"Preset min and max sizes depending on the selected category\"\n                            }\n                        },\n                        {\n                            wrapper: 'logicalGroup',\n                            hideExpression: '!model.enable_category_sizes',\n                            fieldGroup: [\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'Movies'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'moviesmin',\n                                            type: 'duoSetting',\n                                            templateOptions: {\n                                                addonRight: {\n                                                    text: 'MB'\n                                                }\n                                            }\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'moviesmax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'Movies HD'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'movieshdmin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'movieshdmax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'Movies SD'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'moviessdmin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'movieshdmin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'TV'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'tvmin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'tvmax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'TV HD'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'tvhdmin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'tvhdmax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'TV SD'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'tvsdmin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'tvsdmax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'Audio'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'audiomin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'audiomax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'Audio FLAC'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'flacmin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'flacmax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'Audio MP3'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'mp3min',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'mp3max',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'Audiobook'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'audiobookmin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'audiobookmax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'Console'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'consolemin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'consolemax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'PC'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'pcmin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'pcmax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                },\n\n                                {\n                                    wrapper: 'settingWrapper',\n                                    templateOptions: {\n                                        label: 'XXX'\n                                    },\n                                    fieldGroup: [\n                                        {\n                                            key: 'xxxmin',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        },\n                                        {\n                                            type: 'duolabel'\n                                        },\n                                        {\n                                            key: 'xxxmax',\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n\n                    ]\n                }\n\n            ],\n\n            downloader: [\n                {\n                    key: 'downloader',\n                    type: 'horizontalSelect',\n                    templateOptions: {\n                        type: 'select',\n                        label: 'Downloader',\n                        options: [\n                            {name: 'None', value: 'none'},\n                            {name: 'NZBGet', value: 'nzbget'},\n                            {name: 'SABnzbd', value: 'sabnzbd'}\n                        ]\n                    }\n                },\n                {\n                    key: 'nzbaccesstype',\n                    type: 'horizontalSelect',\n                    templateOptions: {\n                        type: 'select',\n                        label: 'NZB access type',\n                        options: [\n                            {name: 'Proxy NZBs from indexer', value: 'serve'},\n                            {name: 'Redirect to the indexer', value: 'redirect'}\n                        ],\n                        help: \"How external access to NZBs is provided. Redirecting is recommended.\"\n                    }\n                },\n                {\n                    key: 'nzbAddingType',\n                    type: 'horizontalSelect',\n                    templateOptions: {\n                        type: 'select',\n                        label: 'NZB adding type',\n                        options: [\n                            {name: 'Send link', value: 'link'},\n                            {name: 'Upload NZB', value: 'nzb'}\n                        ],\n                        help: \"How NZBs are added to the downloader, either by sending a link to the NZB or by uploading the NZB data\"\n                    }\n                },\n                {\n                    wrapper: 'fieldset',\n                    key: 'nzbget',\n                    hideExpression: 'model.downloader!=\"nzbget\"',\n                    templateOptions: {label: 'NZBGet'},\n                    fieldGroup: [\n                        {\n                            key: 'host',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Host',\n                                required: true\n                            }\n                        },\n                        {\n                            key: 'port',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'Port',\n                                placeholder: '5050',\n                                required: true\n                            }\n                        },\n                        {\n                            key: 'ssl',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Use SSL'\n                            }\n                        },\n                        {\n                            key: 'username',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Username'\n                            }\n                        },\n                        {\n                            key: 'password',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'password',\n                                label: 'Password'\n                            }\n                        },\n                        {\n                            key: 'defaultCategory',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Default category',\n                                help: 'When adding NZBs this category will be used instead of asking for the category'\n                            }\n                        },\n                        {\n                            type: 'horizontalTestConnection',\n                            templateOptions: {\n                                label: 'Test connection',\n                                testType: 'downloader',\n                                downloader: 'nzbget'\n                            }\n                        }\n\n\n                    ]\n                },\n                {\n                    wrapper: 'fieldset',\n                    key: 'sabnzbd',\n                    hideExpression: 'model.downloader!=\"sabnzbd\"',\n                    templateOptions: {label: 'SABnzbd'},\n                    fieldGroup: [\n                        {\n                            key: 'url',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'URL',\n                                required: true\n                            }\n                        },\n                        {\n                            key: 'username',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Username',\n                                help: 'Usually not needed when an API key is used'\n                            }\n                        },\n                        {\n                            key: 'password',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'password',\n                                label: 'Password',\n                                help: 'Usually not needed when an API key is used'\n                            }\n                        },\n                        {\n                            key: 'apikey',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'API Key'\n                            }\n                        },\n                        {\n                            key: 'defaultCategory',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Default category',\n                                help: 'When adding NZBs this category will be used instead of asking for the category'\n                            }\n                        },\n                        {\n                            type: 'horizontalTestConnection',\n                            templateOptions: {\n                                label: 'Test connection',\n                                testType: 'downloader',\n                                downloader: 'sabnzbd'\n                            }\n                        }\n\n\n                    ]\n                }\n            ],\n\n        \n            \n            indexers: [\n                {\n                    type: \"indexers\",\n                }\n                /*\n                ,\n                {\n                    wrapper: 'fieldset',\n                    key: 'binsearch',\n                    templateOptions: {label: 'Binsearch'},\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"binsearch\", true, false)\n                },\n                {\n                    wrapper: 'fieldset',\n                    key: 'nzbclub',\n                    templateOptions: {label: 'NZBClub'},\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"nzbclub\", true, false)\n                },\n                {\n                    wrapper: 'fieldset',\n                    key: 'nzbindex',\n                    templateOptions: {label: 'NZBIndex'},\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"nzbindex\", true, false).concat([{\n                        key: 'generalMinSize',\n                        type: 'horizontalInput',\n                        hideExpression: '!model.enabled',\n                        templateOptions: {\n                            type: 'number',\n                            label: 'Min size',\n                            help: 'NZBIndex returns a lot of crap with small file sizes. Set this value and all smaller results will be filtered out no matter the category'\n                        }\n                    }])\n                },\n                {\n                    wrapper: 'fieldset',\n                    key: 'omgwtfnzbs',\n                    templateOptions: {label: 'omgwtfnzbs.org'},\n                    fieldGroup: getBasicIndexerFieldset(false, false, true, true, false, true, 'omgwtf', true, false)\n                },\n                {\n                    wrapper: 'fieldset',\n                    key: 'womble',\n                    templateOptions: {label: 'Womble'},\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"womble\", true, false)\n                },\n                {\n                    type: 'repeatSection',\n                    key: 'newznab',\n                    templateOptions: {\n                        btnText: 'Add new newznab indexer',\n                        altLegendText: 'New indexer',\n                        fields: getBasicIndexerFieldset(true, true, true, false, true, true, 'newznab', true, true),\n                        defaultModel: {\n                            enabled: true,\n                            host: null,\n                            apikey: null,\n                            hitLimit: null,\n                            hitLimitResetTime: new Date(0),\n                            timeout: null,\n                            name: null,\n                            showOnSearch: true,\n                            score: 0,\n                            username: null,\n                            password: null,\n                            preselect: true,\n                            accessType: \"both\",\n                            search_ids: [\"imdbid\", \"rid\", \"tvdbid\"],\n                            searchTypes: [\"tvsearch\", \"movie\"]\n                        }\n\n                    }\n\n                }\n\n            */\n            ],\n\n            auth: [\n                {\n                    type: 'help',\n                    templateOptions: {\n                        lines: [\n                            'To require login only for admin access create a user with empty username and password and add a user with username and password and admin rights.',\n                            'To have a simple and an admin user remove the authless user and create two users, one without and one with admin rights.',\n                            'Leave empty to disable authorization.'\n                        ]\n                    }\n                },\n                {\n                    type: 'repeatSection',\n                    key: 'users',\n                    model: rootModel.auth,\n                    templateOptions: {\n                        btnText: 'Add new user',\n                        altLegendText: 'Authless',\n                        fields: [\n                            {\n                                key: 'username',\n                                type: 'horizontalInput',\n                                templateOptions: {\n                                    type: 'text',\n                                    label: 'Username'\n                                }\n                            },\n                            {\n                                key: 'password',\n                                type: 'horizontalInput',\n                                templateOptions: {\n                                    type: 'password',\n                                    label: 'Password'\n                                }\n                            },\n                            {\n                                key: 'maySeeStats',\n                                type: 'horizontalSwitch',\n                                templateOptions: {\n                                    type: 'switch',\n                                    label: 'May see stats'\n                                }\n                            },\n                            {\n                                key: 'maySeeAdmin',\n                                type: 'horizontalSwitch',\n                                templateOptions: {\n                                    type: 'switch',\n                                    label: 'May see admin area'\n                                },\n                                validators: {\n                                    dontLockYourselfOut: authValidatorDontLockYourselfOut(rootModel)\n                                },\n                                data: {\n                                    rootModel: rootModel\n                                }\n                            }\n\n                        ],\n                        defaultModel: {\n                            username: null,\n                            password: null,\n                            maySeeStats: true,\n                            maySeeAdmin: true\n                        }\n                    }\n                }\n            ]\n        };\n    }\n}","angular\n    .module('nzbhydraApp')\n    .factory('ConfigModel', function () {\n        return {};\n    });\n\nangular\n    .module('nzbhydraApp')\n    .factory('ConfigWatcher', function () {\n        var $scope;\n\n        return {\n            watch: watch\n        };\n\n        function watch(scope) {\n            $scope = scope;\n            $scope.$watchGroup([\"config.main.host\"], function () {\n                console.log(\"Restart needed\");\n            }, true);\n        }\n    });\n\n\nangular\n    .module('nzbhydraApp')\n    .controller('ConfigController', ConfigController);\n\nfunction ConfigController($scope, ConfigService, config, CategoriesService, ConfigFields, ConfigModel, ModalService, RestartService, $state, growl) {\n    $scope.config = config;\n    $scope.submit = submit;\n\n    $scope.restartRequired = false;\n\n    ConfigFields.setRestartWatcher(function () {\n        $scope.restartRequired = true;\n    });\n\n    $scope.newfields = [];\n\n    function submit(form) {\n        console.log(\"Submitting\");\n        if (form.$valid) {\n            \n            ConfigService.set($scope.config);\n            ConfigService.invalidateSafe();\n            form.$setPristine();\n            CategoriesService.invalidate();\n            if ($scope.restartRequired) {\n                ModalService.open(\"Restart required\", \"The changes you have made may require a restart to be effective.<br>Do you want to restart now?\", function () {\n                    RestartService.restart();\n                }, function () {\n                    $scope.restartRequired = false;\n                });\n            }\n        } else {\n            growl.error(\"Config invalid. Please check your settings.\");\n            \n            //Ridiculously hacky way to make the error messages appear\n            try {\n                if (angular.isDefined(form.$error.required)) {\n                    _.each(form.$error.required, function (item) {\n                        if (angular.isDefined(item.$error.required)) {\n                            _.each(item.$error.required, function (item2) {\n                                item2.$setTouched();\n                            });\n                        } \n                    });\n                }\n                angular.forEach($scope.form.$error.required, function (field) {\n                    field.$setTouched();\n                });\n            } catch(err) {\n                //\n            }\n            \n        }\n    }\n\n    ConfigModel = config;\n\n    $scope.fields = ConfigFields.getFields($scope.config);\n\n    $scope.formTabs = [\n        {\n            name: 'Main',\n            model: ConfigModel.main,\n            fields: $scope.fields.main\n        },\n        {\n            name: 'Authorization',\n            model: ConfigModel.auth,\n            fields: $scope.fields.auth\n        },\n        {\n            name: 'Searching',\n            model: ConfigModel.searching,\n            fields: $scope.fields.searching\n        },\n        {\n            name: 'Downloader',\n            model: ConfigModel.downloader,\n            fields: $scope.fields.downloader\n        },\n        {\n            name: 'Indexers',\n            model: ConfigModel.indexers,\n            fields: $scope.fields.indexers\n        }\n    ];\n\n    $scope.allTabs = [\n        {\n            active: false,\n            state: 'config'\n        },\n        {\n            active: false,\n            state: 'config.auth'\n        },\n        {\n            active: false,\n            state: 'config.searching'\n        },\n        {\n            active: false,\n            state: 'config.downloader'\n        },\n        {\n            active: false,\n            state: 'config.indexers'\n        }\n    ];\n\n    for (var i = 0; i < $scope.allTabs.length; i++) {\n        if ($state.is($scope.allTabs[i].state)) {\n            $scope.allTabs[i].active = true;\n        }\n    }\n\n    $scope.isSavingNeeded = function (form) {\n        return form.$dirty && form.$valid;\n    };\n\n    $scope.goToConfigState = function (index) {\n        $state.go($scope.allTabs[index].state);\n        if (index == 5) {\n            $scope.downloadLog();\n        }\n    };\n    \n\n\n}\nConfigController.$inject = [\"$scope\", \"ConfigService\", \"config\", \"CategoriesService\", \"ConfigFields\", \"ConfigModel\", \"ModalService\", \"RestartService\", \"$state\", \"growl\"];\n\n\n","angular\n    .module('nzbhydraApp')\n    .factory('CategoriesService', CategoriesService);\n\nfunction CategoriesService($http, $q, $uibModal) {\n\n    var categories;\n    var selectedCategory;\n    \n    var service = {\n        get: getCategories,\n        invalidate: invalidate,\n        select : select,\n        openCategorySelection: openCategorySelection \n    };\n    \n    return service;\n    \n\n    function getCategories() {\n\n        function loadAll() {\n            if (!angular.isUndefined(categories)) {\n                var deferred = $q.defer();\n                deferred.resolve(categories);\n                return deferred.promise;\n            }\n\n            return $http.get('internalapi/getcategories')\n                .then(function (categoriesResponse) {\n                    \n                        console.log(\"Updating downloader categories cache\");\n                        categories = categoriesResponse.data;\n                        return categoriesResponse.data;\n                    \n                }, function(error) {\n                    throw error;\n                });\n        }\n\n        return loadAll().then(function (categories) {\n            return categories.categories;\n        }, function (error) {\n            throw error;\n        });\n    }\n\n    \n    var deferred;\n    \n    function openCategorySelection() {\n        $uibModal.open({\n            templateUrl: 'static/html/directives/addable-nzb-modal.html',\n            controller: 'CategorySelectionController',\n            size: \"sm\",\n            resolve: {\n                categories: getCategories\n            }\n        });\n        deferred = $q.defer();\n        return deferred.promise;\n    }\n    \n    function select(category) {\n        selectedCategory = category;\n        console.log(\"Selected category \" + category);\n        deferred.resolve(category);\n    }\n    \n    function invalidate() {\n        console.log(\"Invalidating categories\");\n        categories = undefined;\n    }\n}\nCategoriesService.$inject = [\"$http\", \"$q\", \"$uibModal\"];\n\nangular\n    .module('nzbhydraApp').controller('CategorySelectionController', [\"$scope\", \"$uibModalInstance\", \"CategoriesService\", \"categories\", function ($scope, $uibModalInstance, CategoriesService, categories) {\n    console.log(categories);\n    $scope.categories = categories;\n    $scope.select = function (category) {\n        CategoriesService.select(category);\n        $uibModalInstance.close($scope);\n    }\n}]);","angular\r\n    .module('nzbhydraApp')\r\n    .factory('BackupService', BackupService);\r\n\r\nfunction BackupService($http) {\r\n\r\n    return {\r\n        getBackupsList: getBackupsList\r\n    };\r\n    \r\n\r\n    function getBackupsList() {\r\n        return $http.get('internalapi/getbackups').then(function (data) {\r\n            return data.data.backups;\r\n        });\r\n    }\r\n\r\n}\r\nBackupService.$inject = [\"$http\"];"],"sourceRoot":"/source/"}